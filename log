Build profile: -w ghc-8.10.4.20210212 -O1
In order, the following will be built (use -v for more details):
 - plutus-script-utils-0.1.0.0 (lib) (file src/Plutus/V1/Utils/Typed/Scripts/StakeValidators.hs changed)
Preprocessing library for plutus-script-utils-0.1.0.0..
Running Haddock on library for plutus-script-utils-0.1.0.0..
Haddock coverage:
Warning: 'Script' is out of scope.
    If you qualify the identifier, haddock can try to link it anyway.
  40% (  4 / 10) in 'Plutus.V1.Utils.Scripts'
  Missing documentation for:
    Module header
    datumHash (src/Plutus/V1/Utils/Scripts.hs:25)
    redeemerHash (src/Plutus/V1/Utils/Scripts.hs:28)
    validatorHash (src/Plutus/V1/Utils/Scripts.hs:31)
    mintingPolicyHash (src/Plutus/V1/Utils/Scripts.hs:38)
    stakeValidatorHash (src/Plutus/V1/Utils/Scripts.hs:45)
Warning: Couldn't find .haddock for export Validator
Warning: Couldn't find .haddock for export MintingPolicy
Warning: Couldn't find .haddock for export StakeValidator
   0% (  0 /  4) in 'Plutus.V1.Utils.Typed.Scripts'
  Missing documentation for:
    Module header
    Validator
    MintingPolicy
    StakeValidator
Warning: 'coerce' is out of scope.
    If you qualify the identifier, haddock can try to link it anyway.
  50% (  2 /  4) in 'Plutus.V1.Utils.Typed.TypeUtils'
  Missing documentation for:
    Module header
    Any (src/Plutus/V1/Utils/Typed/TypeUtils.hs:23)
GHC Core to PLC plugin: E043:Error: Reference to a name which is not a local, a builtin, or an external INLINABLE function: Variable PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
            No unfolding
Context: Compiling expr: PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
Context: Compiling expr: PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                           @ Plutus.V1.Ledger.Credential.StakingCredential
Context: Compiling expr: PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                           @ Plutus.V1.Ledger.Credential.StakingCredential
                           (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                            `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                    :: GHC.Types.Coercible
                                         (PlutusTx.Builtins.Internal.BuiltinData
                                          -> Plutus.V1.Ledger.Credential.StakingCredential)
                                         (PlutusTx.IsData.Class.UnsafeFromData
                                            Plutus.V1.Ledger.Credential.StakingCredential)))
Context: Compiling expr: PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                           @ Plutus.V1.Ledger.Credential.StakingCredential
                           (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                            `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                    :: GHC.Types.Coercible
                                         (PlutusTx.Builtins.Internal.BuiltinData
                                          -> Plutus.V1.Ledger.Credential.StakingCredential)
                                         (PlutusTx.IsData.Class.UnsafeFromData
                                            Plutus.V1.Ledger.Credential.StakingCredential)))
                           (PlutusTx.Builtins.Internal.head
                              @ PlutusTx.Builtins.Internal.BuiltinData
                              (PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t))
Context: Compiling expr: let {
                           x2 [Occ=OnceL]
                             :: GHC.Maybe.Maybe Plutus.V1.Ledger.Credential.StakingCredential
                           [LclId]
                           x2
                             = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Credential.StakingCredential
                                 (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Credential.StakingCredential)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Credential.StakingCredential)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                         let {
                           x3 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                           [LclId]
                           x3 = Plutus.V1.Ledger.Address.Address x1 x2 } in
                         \ _ [Occ=Dead] -> x3
Context: Compiling expr: let {
                           x1 [Occ=OnceL] :: Plutus.V1.Ledger.Credential.Credential
                           [LclId]
                           x1
                             = Plutus.V1.Ledger.Credential.$fUnsafeFromDataCredential_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x2 [Occ=OnceL]
                             :: GHC.Maybe.Maybe Plutus.V1.Ledger.Credential.StakingCredential
                           [LclId]
                           x2
                             = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Credential.StakingCredential
                                 (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Credential.StakingCredential)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Credential.StakingCredential)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                         let {
                           x3 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                           [LclId]
                           x3 = Plutus.V1.Ledger.Address.Address x1 x2 } in
                         \ _ [Occ=Dead] -> x3
Context: Compiling expr: let {
                           t :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t = PlutusTx.Builtins.Internal.snd
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup } in
                         let {
                           x1 [Occ=OnceL] :: Plutus.V1.Ledger.Credential.Credential
                           [LclId]
                           x1
                             = Plutus.V1.Ledger.Credential.$fUnsafeFromDataCredential_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x2 [Occ=OnceL]
                             :: GHC.Maybe.Maybe Plutus.V1.Ledger.Credential.StakingCredential
                           [LclId]
                           x2
                             = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Credential.StakingCredential
                                 (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Credential.StakingCredential)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Credential.StakingCredential)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                         let {
                           x3 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                           [LclId]
                           x3 = Plutus.V1.Ledger.Address.Address x1 x2 } in
                         \ _ [Occ=Dead] -> x3
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Address.Address)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x1 [Occ=OnceL] :: Plutus.V1.Ledger.Credential.Credential
                              [LclId]
                              x1
                                = Plutus.V1.Ledger.Credential.$fUnsafeFromDataCredential_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x2 [Occ=OnceL]
                                :: GHC.Maybe.Maybe Plutus.V1.Ledger.Credential.StakingCredential
                              [LclId]
                              x2
                                = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Credential.StakingCredential
                                    (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Credential.StakingCredential)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x3 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x3 = Plutus.V1.Ledger.Address.Address x1 x2 } in
                            \ _ [Occ=Dead] -> x3)
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Address.Address)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x1 [Occ=OnceL] :: Plutus.V1.Ledger.Credential.Credential
                              [LclId]
                              x1
                                = Plutus.V1.Ledger.Credential.$fUnsafeFromDataCredential_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x2 [Occ=OnceL]
                                :: GHC.Maybe.Maybe Plutus.V1.Ledger.Credential.StakingCredential
                              [LclId]
                              x2
                                = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Credential.StakingCredential
                                    (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Credential.StakingCredential)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x3 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x3 = Plutus.V1.Ledger.Address.Address x1 x2 } in
                            \ _ [Occ=Dead] -> x3)
                           (let {
                              x1 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x1
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Address.Address
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x1)
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Address.Address)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x1 [Occ=OnceL] :: Plutus.V1.Ledger.Credential.Credential
                              [LclId]
                              x1
                                = Plutus.V1.Ledger.Credential.$fUnsafeFromDataCredential_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x2 [Occ=OnceL]
                                :: GHC.Maybe.Maybe Plutus.V1.Ledger.Credential.StakingCredential
                              [LclId]
                              x2
                                = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Credential.StakingCredential
                                    (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Credential.StakingCredential)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x3 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x3 = Plutus.V1.Ledger.Address.Address x1 x2 } in
                            \ _ [Occ=Dead] -> x3)
                           (let {
                              x1 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x1
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Address.Address
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x1)
                           PlutusTx.Builtins.Internal.unitval
Context: Compiling expr: let {
                           tup
                             :: PlutusTx.Builtins.Internal.BuiltinPair
                                  PlutusTx.Builtins.Internal.BuiltinInteger
                                  (PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData)
                           [LclId]
                           tup = PlutusTx.Builtins.Internal.unsafeDataAsConstr d } in
                         PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Address.Address)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x1 [Occ=OnceL] :: Plutus.V1.Ledger.Credential.Credential
                              [LclId]
                              x1
                                = Plutus.V1.Ledger.Credential.$fUnsafeFromDataCredential_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x2 [Occ=OnceL]
                                :: GHC.Maybe.Maybe Plutus.V1.Ledger.Credential.StakingCredential
                              [LclId]
                              x2
                                = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Credential.StakingCredential
                                    (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Credential.StakingCredential)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x3 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x3 = Plutus.V1.Ledger.Address.Address x1 x2 } in
                            \ _ [Occ=Dead] -> x3)
                           (let {
                              x1 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x1
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Address.Address
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x1)
                           PlutusTx.Builtins.Internal.unitval
Context: Compiling expr: \ (d [Occ=Once]
                              :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           let {
                             tup
                               :: PlutusTx.Builtins.Internal.BuiltinPair
                                    PlutusTx.Builtins.Internal.BuiltinInteger
                                    (PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData)
                             [LclId]
                             tup = PlutusTx.Builtins.Internal.unsafeDataAsConstr d } in
                           PlutusTx.Builtins.Internal.ifThenElse
                             @ (PlutusTx.Builtins.Internal.BuiltinUnit
                                -> Plutus.V1.Ledger.Address.Address)
                             (PlutusTx.Builtins.Internal.equalsInteger
                                (PlutusTx.Builtins.Internal.fst
                                   @ PlutusTx.Builtins.Internal.BuiltinInteger
                                   @ (PlutusTx.Builtins.Internal.BuiltinList
                                        PlutusTx.Builtins.Internal.BuiltinData)
                                   tup)
                                0)
                             (let {
                                t :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t = PlutusTx.Builtins.Internal.snd
                                      @ PlutusTx.Builtins.Internal.BuiltinInteger
                                      @ (PlutusTx.Builtins.Internal.BuiltinList
                                           PlutusTx.Builtins.Internal.BuiltinData)
                                      tup } in
                              let {
                                x1 [Occ=OnceL] :: Plutus.V1.Ledger.Credential.Credential
                                [LclId]
                                x1
                                  = Plutus.V1.Ledger.Credential.$fUnsafeFromDataCredential_$cunsafeFromBuiltinData
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                              let {
                                x2 [Occ=OnceL]
                                  :: GHC.Maybe.Maybe Plutus.V1.Ledger.Credential.StakingCredential
                                [LclId]
                                x2
                                  = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                      @ Plutus.V1.Ledger.Credential.StakingCredential
                                      (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                       `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       Plutus.V1.Ledger.Credential.StakingCredential)))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData
                                         (PlutusTx.Builtins.Internal.tail
                                            @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                              let {
                                x3 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                                [LclId]
                                x3 = Plutus.V1.Ledger.Address.Address x1 x2 } in
                              \ _ [Occ=Dead] -> x3)
                             (let {
                                x1 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                                [LclId]
                                x1
                                  = PlutusTx.Builtins.Internal.error
                                      @ Plutus.V1.Ledger.Address.Address
                                      (case PlutusTx.Builtins.Internal.trace
                                              @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                       of
                                       { () ->
                                       PlutusTx.Builtins.Internal.unitval
                                       }) } in
                              \ _ [Occ=Dead] -> x1)
                             PlutusTx.Builtins.Internal.unitval
Context: Compiling definition of: Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
Context: Compiling expr: Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
Context: Compiling expr: Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
                           (PlutusTx.Builtins.Internal.head
                              @ PlutusTx.Builtins.Internal.BuiltinData t)
Context: Compiling expr: let {
                           x2 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                           [LclId]
                           x2
                             = Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x3 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x3
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x4 [Occ=OnceL]
                             :: GHC.Maybe.Maybe Plutus.V1.Ledger.Scripts.DatumHash
                           [LclId]
                           x4
                             = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Scripts.DatumHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Scripts.DatumHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1)) } in
                         let {
                           x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                           [LclId]
                           x5
                             = Plutus.V1.Ledger.Tx.TxOut
                                 x2
                                 (x3
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x4 } in
                         \ _ [Occ=Dead] -> x5
Context: Compiling expr: let {
                           t1
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t1
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t } in
                         let {
                           x2 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                           [LclId]
                           x2
                             = Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x3 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x3
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x4 [Occ=OnceL]
                             :: GHC.Maybe.Maybe Plutus.V1.Ledger.Scripts.DatumHash
                           [LclId]
                           x4
                             = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Scripts.DatumHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Scripts.DatumHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1)) } in
                         let {
                           x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                           [LclId]
                           x5
                             = Plutus.V1.Ledger.Tx.TxOut
                                 x2
                                 (x3
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x4 } in
                         \ _ [Occ=Dead] -> x5
Context: Compiling expr: let {
                           t :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t = PlutusTx.Builtins.Internal.snd
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup } in
                         let {
                           t1
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t1
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t } in
                         let {
                           x2 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                           [LclId]
                           x2
                             = Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x3 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x3
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x4 [Occ=OnceL]
                             :: GHC.Maybe.Maybe Plutus.V1.Ledger.Scripts.DatumHash
                           [LclId]
                           x4
                             = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Scripts.DatumHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Scripts.DatumHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1)) } in
                         let {
                           x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                           [LclId]
                           x5
                             = Plutus.V1.Ledger.Tx.TxOut
                                 x2
                                 (x3
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x4 } in
                         \ _ [Occ=Dead] -> x5
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Tx.TxOut)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              t1
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t1
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t } in
                            let {
                              x2 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x2
                                = Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x3 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x3
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                            let {
                              x4 [Occ=OnceL]
                                :: GHC.Maybe.Maybe Plutus.V1.Ledger.Scripts.DatumHash
                              [LclId]
                              x4
                                = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Scripts.DatumHash
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Scripts.DatumHash)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t1)) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Tx.TxOut
                                    x2
                                    (x3
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    x4 } in
                            \ _ [Occ=Dead] -> x5)
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Tx.TxOut)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              t1
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t1
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t } in
                            let {
                              x2 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x2
                                = Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x3 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x3
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                            let {
                              x4 [Occ=OnceL]
                                :: GHC.Maybe.Maybe Plutus.V1.Ledger.Scripts.DatumHash
                              [LclId]
                              x4
                                = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Scripts.DatumHash
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Scripts.DatumHash)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t1)) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Tx.TxOut
                                    x2
                                    (x3
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    x4 } in
                            \ _ [Occ=Dead] -> x5)
                           (let {
                              x2 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x2
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Tx.TxOut
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x2)
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Tx.TxOut)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              t1
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t1
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t } in
                            let {
                              x2 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x2
                                = Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x3 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x3
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                            let {
                              x4 [Occ=OnceL]
                                :: GHC.Maybe.Maybe Plutus.V1.Ledger.Scripts.DatumHash
                              [LclId]
                              x4
                                = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Scripts.DatumHash
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Scripts.DatumHash)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t1)) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Tx.TxOut
                                    x2
                                    (x3
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    x4 } in
                            \ _ [Occ=Dead] -> x5)
                           (let {
                              x2 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x2
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Tx.TxOut
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x2)
                           PlutusTx.Builtins.Internal.unitval
Context: Compiling expr: let {
                           tup
                             :: PlutusTx.Builtins.Internal.BuiltinPair
                                  PlutusTx.Builtins.Internal.BuiltinInteger
                                  (PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData)
                           [LclId]
                           tup = PlutusTx.Builtins.Internal.unsafeDataAsConstr d } in
                         PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Tx.TxOut)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              t1
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t1
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t } in
                            let {
                              x2 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                              [LclId]
                              x2
                                = Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x3 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x3
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                            let {
                              x4 [Occ=OnceL]
                                :: GHC.Maybe.Maybe Plutus.V1.Ledger.Scripts.DatumHash
                              [LclId]
                              x4
                                = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Scripts.DatumHash
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Scripts.DatumHash)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t1)) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Tx.TxOut
                                    x2
                                    (x3
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    x4 } in
                            \ _ [Occ=Dead] -> x5)
                           (let {
                              x2 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x2
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Tx.TxOut
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x2)
                           PlutusTx.Builtins.Internal.unitval
Context: Compiling expr: \ (d [Occ=Once]
                              :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           let {
                             tup
                               :: PlutusTx.Builtins.Internal.BuiltinPair
                                    PlutusTx.Builtins.Internal.BuiltinInteger
                                    (PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData)
                             [LclId]
                             tup = PlutusTx.Builtins.Internal.unsafeDataAsConstr d } in
                           PlutusTx.Builtins.Internal.ifThenElse
                             @ (PlutusTx.Builtins.Internal.BuiltinUnit
                                -> Plutus.V1.Ledger.Tx.TxOut)
                             (PlutusTx.Builtins.Internal.equalsInteger
                                (PlutusTx.Builtins.Internal.fst
                                   @ PlutusTx.Builtins.Internal.BuiltinInteger
                                   @ (PlutusTx.Builtins.Internal.BuiltinList
                                        PlutusTx.Builtins.Internal.BuiltinData)
                                   tup)
                                0)
                             (let {
                                t :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t = PlutusTx.Builtins.Internal.snd
                                      @ PlutusTx.Builtins.Internal.BuiltinInteger
                                      @ (PlutusTx.Builtins.Internal.BuiltinList
                                           PlutusTx.Builtins.Internal.BuiltinData)
                                      tup } in
                              let {
                                t1
                                  :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t1
                                  = PlutusTx.Builtins.Internal.tail
                                      @ PlutusTx.Builtins.Internal.BuiltinData t } in
                              let {
                                x2 [Occ=OnceL] :: Plutus.V1.Ledger.Address.Address
                                [LclId]
                                x2
                                  = Plutus.V1.Ledger.Address.$fUnsafeFromDataAddress_$cunsafeFromBuiltinData
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                              let {
                                x3 [Occ=OnceL]
                                  :: PlutusTx.AssocMap.Map
                                       Plutus.V1.Ledger.Value.CurrencySymbol
                                       (PlutusTx.AssocMap.Map
                                          Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                [LclId]
                                x3
                                  = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                      @ Plutus.V1.Ledger.Value.CurrencySymbol
                                      @ (PlutusTx.AssocMap.Map
                                           Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                      (PlutusTx.Builtins.Internal.unsafeDataAsB
                                       `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       Plutus.V1.Ledger.Value.CurrencySymbol)))
                                      (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                       `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                  Plutus.V1.Ledger.Value.TokenName
                                                                                                  GHC.Integer.Type.Integer>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> PlutusTx.AssocMap.Map
                                                          Plutus.V1.Ledger.Value.TokenName
                                                          GHC.Integer.Type.Integer)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       (PlutusTx.AssocMap.Map
                                                          Plutus.V1.Ledger.Value.TokenName
                                                          GHC.Integer.Type.Integer))))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                              let {
                                x4 [Occ=OnceL]
                                  :: GHC.Maybe.Maybe Plutus.V1.Ledger.Scripts.DatumHash
                                [LclId]
                                x4
                                  = PlutusTx.IsData.Instances.$fUnsafeFromDataMaybe_$cunsafeFromBuiltinData
                                      @ Plutus.V1.Ledger.Scripts.DatumHash
                                      (PlutusTx.Builtins.Internal.unsafeDataAsB
                                       `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       Plutus.V1.Ledger.Scripts.DatumHash)))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData
                                         (PlutusTx.Builtins.Internal.tail
                                            @ PlutusTx.Builtins.Internal.BuiltinData t1)) } in
                              let {
                                x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                                [LclId]
                                x5
                                  = Plutus.V1.Ledger.Tx.TxOut
                                      x2
                                      (x3
                                       `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.CurrencySymbol
                                                       (PlutusTx.AssocMap.Map
                                                          Plutus.V1.Ledger.Value.TokenName
                                                          GHC.Integer.Type.Integer))
                                                    Plutus.V1.Ledger.Value.Value))
                                      x4 } in
                              \ _ [Occ=Dead] -> x5)
                             (let {
                                x2 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                                [LclId]
                                x2
                                  = PlutusTx.Builtins.Internal.error
                                      @ Plutus.V1.Ledger.Tx.TxOut
                                      (case PlutusTx.Builtins.Internal.trace
                                              @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                       of
                                       { () ->
                                       PlutusTx.Builtins.Internal.unitval
                                       }) } in
                              \ _ [Occ=Dead] -> x2)
                             PlutusTx.Builtins.Internal.unitval
Context: Compiling definition of: Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
Context: Compiling expr: Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
Context: Compiling expr: Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                           (PlutusTx.Builtins.Internal.head
                              @ PlutusTx.Builtins.Internal.BuiltinData
                              (PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t))
Context: Compiling expr: let {
                           x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                           [LclId]
                           x5
                             = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                         let {
                           x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                           [LclId]
                           x6 = Plutus.V1.Ledger.Contexts.TxInInfo x4 x5 } in
                         \ _ [Occ=Dead] -> x6
Context: Compiling expr: let {
                           x4 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOutRef
                           [LclId]
                           x4
                             = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                           [LclId]
                           x5
                             = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                         let {
                           x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                           [LclId]
                           x6 = Plutus.V1.Ledger.Contexts.TxInInfo x4 x5 } in
                         \ _ [Occ=Dead] -> x6
Context: Compiling expr: let {
                           t :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t = PlutusTx.Builtins.Internal.snd
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup } in
                         let {
                           x4 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOutRef
                           [LclId]
                           x4
                             = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                           [LclId]
                           x5
                             = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                         let {
                           x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                           [LclId]
                           x6 = Plutus.V1.Ledger.Contexts.TxInInfo x4 x5 } in
                         \ _ [Occ=Dead] -> x6
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.TxInInfo)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOutRef
                              [LclId]
                              x4
                                = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                              [LclId]
                              x6 = Plutus.V1.Ledger.Contexts.TxInInfo x4 x5 } in
                            \ _ [Occ=Dead] -> x6)
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.TxInInfo)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOutRef
                              [LclId]
                              x4
                                = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                              [LclId]
                              x6 = Plutus.V1.Ledger.Contexts.TxInInfo x4 x5 } in
                            \ _ [Occ=Dead] -> x6)
                           (let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                              [LclId]
                              x4
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Contexts.TxInInfo
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x4)
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.TxInInfo)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOutRef
                              [LclId]
                              x4
                                = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                              [LclId]
                              x6 = Plutus.V1.Ledger.Contexts.TxInInfo x4 x5 } in
                            \ _ [Occ=Dead] -> x6)
                           (let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                              [LclId]
                              x4
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Contexts.TxInInfo
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x4)
                           PlutusTx.Builtins.Internal.unitval
Context: Compiling expr: let {
                           tup
                             :: PlutusTx.Builtins.Internal.BuiltinPair
                                  PlutusTx.Builtins.Internal.BuiltinInteger
                                  (PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData)
                           [LclId]
                           tup = PlutusTx.Builtins.Internal.unsafeDataAsConstr d } in
                         PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.TxInInfo)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOutRef
                              [LclId]
                              x4
                                = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                              [LclId]
                              x6 = Plutus.V1.Ledger.Contexts.TxInInfo x4 x5 } in
                            \ _ [Occ=Dead] -> x6)
                           (let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                              [LclId]
                              x4
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Contexts.TxInInfo
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x4)
                           PlutusTx.Builtins.Internal.unitval
Context: Compiling expr: \ (d [Occ=Once]
                              :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           let {
                             tup
                               :: PlutusTx.Builtins.Internal.BuiltinPair
                                    PlutusTx.Builtins.Internal.BuiltinInteger
                                    (PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData)
                             [LclId]
                             tup = PlutusTx.Builtins.Internal.unsafeDataAsConstr d } in
                           PlutusTx.Builtins.Internal.ifThenElse
                             @ (PlutusTx.Builtins.Internal.BuiltinUnit
                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                             (PlutusTx.Builtins.Internal.equalsInteger
                                (PlutusTx.Builtins.Internal.fst
                                   @ PlutusTx.Builtins.Internal.BuiltinInteger
                                   @ (PlutusTx.Builtins.Internal.BuiltinList
                                        PlutusTx.Builtins.Internal.BuiltinData)
                                   tup)
                                0)
                             (let {
                                t :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t = PlutusTx.Builtins.Internal.snd
                                      @ PlutusTx.Builtins.Internal.BuiltinInteger
                                      @ (PlutusTx.Builtins.Internal.BuiltinList
                                           PlutusTx.Builtins.Internal.BuiltinData)
                                      tup } in
                              let {
                                x4 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOutRef
                                [LclId]
                                x4
                                  = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOutRef_$cunsafeFromBuiltinData
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                              let {
                                x5 [Occ=OnceL] :: Plutus.V1.Ledger.Tx.TxOut
                                [LclId]
                                x5
                                  = Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData
                                         (PlutusTx.Builtins.Internal.tail
                                            @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                              let {
                                x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                                [LclId]
                                x6 = Plutus.V1.Ledger.Contexts.TxInInfo x4 x5 } in
                              \ _ [Occ=Dead] -> x6)
                             (let {
                                x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInInfo
                                [LclId]
                                x4
                                  = PlutusTx.Builtins.Internal.error
                                      @ Plutus.V1.Ledger.Contexts.TxInInfo
                                      (case PlutusTx.Builtins.Internal.trace
                                              @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                       of
                                       { () ->
                                       PlutusTx.Builtins.Internal.unitval
                                       }) } in
                              \ _ [Occ=Dead] -> x4)
                             PlutusTx.Builtins.Internal.unitval
Context: Compiling definition of: Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
Context: Compiling expr: Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
Context: Compiling expr: Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                         `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                 :: GHC.Types.Coercible
                                      (PlutusTx.Builtins.Internal.BuiltinData
                                       -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                      (PlutusTx.IsData.Class.UnsafeFromData
                                         Plutus.V1.Ledger.Contexts.TxInInfo))
Context: Compiling expr: PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                           @ Plutus.V1.Ledger.Contexts.TxInInfo
                           (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                            `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                    :: GHC.Types.Coercible
                                         (PlutusTx.Builtins.Internal.BuiltinData
                                          -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                         (PlutusTx.IsData.Class.UnsafeFromData
                                            Plutus.V1.Ledger.Contexts.TxInInfo)))
Context: Compiling expr: PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                           @ Plutus.V1.Ledger.Contexts.TxInInfo
                           (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                            `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                    :: GHC.Types.Coercible
                                         (PlutusTx.Builtins.Internal.BuiltinData
                                          -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                         (PlutusTx.IsData.Class.UnsafeFromData
                                            Plutus.V1.Ledger.Contexts.TxInInfo)))
                           (PlutusTx.Builtins.Internal.head
                              @ PlutusTx.Builtins.Internal.BuiltinData t)
Context: Compiling expr: let {
                           x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                           [LclId]
                           x4
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Contexts.TxInInfo
                                 (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Contexts.TxInInfo)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                           [LclId]
                           x5
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Tx.TxOut
                                 (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Tx.TxOut)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Tx.TxOut)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x6 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x6
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                         let {
                           x7 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x7
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                         let {
                           x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                           [LclId]
                           x8
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.DCert.DCert
                                 (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.DCert.DCert)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.DCert.DCert)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                         let {
                           x9 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                  GHC.Integer.Type.Integer)]
                           [LclId]
                           x9
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                    GHC.Integer.Type.Integer)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Credential.StakingCredential
                                     @ GHC.Integer.Type.Integer
                                     (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Credential.StakingCredential)))
                                     (PlutusTx.Builtins.Internal.unsafeDataAsI
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> GHC.Integer.Type.Integer)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      GHC.Integer.Type.Integer))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                            GHC.Integer.Type.Integer)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                    GHC.Integer.Type.Integer))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Credential.StakingCredential,
                                                   GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                         let {
                           x10 [Occ=OnceL]
                             :: Plutus.V1.Ledger.Interval.Interval
                                  Plutus.V1.Ledger.Time.POSIXTime
                           [LclId]
                           x10
                             = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Time.POSIXTime
                                 (PlutusTx.Builtins.Internal.unsafeDataAsI
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Time.POSIXTime)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                         let {
                           x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                           [LclId]
                           x11
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                         let {
                           x12 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                  Plutus.V1.Ledger.Scripts.Datum)]
                           [LclId]
                           x12
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                    Plutus.V1.Ledger.Scripts.Datum)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Scripts.DatumHash
                                     @ Plutus.V1.Ledger.Scripts.Datum
                                     (PlutusTx.Builtins.Internal.unsafeDataAsB
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.DatumHash)))
                                     (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinData)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                            Plutus.V1.Ledger.Scripts.Datum)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                    Plutus.V1.Ledger.Scripts.Datum))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Scripts.DatumHash,
                                                   Plutus.V1.Ledger.Scripts.Datum))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                         let {
                           x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                           [LclId]
                           x13
                             = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                         let {
                           x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x14
                             = Plutus.V1.Ledger.Contexts.TxInfo
                                 x4
                                 x5
                                 (x6
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 (x7
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x8
                                 x9
                                 x10
                                 x11
                                 x12
                                 x13 } in
                         \ _ [Occ=Dead] -> x14
Context: Compiling expr: let {
                           t8
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t8
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                         let {
                           x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                           [LclId]
                           x4
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Contexts.TxInInfo
                                 (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Contexts.TxInInfo)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                           [LclId]
                           x5
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Tx.TxOut
                                 (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Tx.TxOut)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Tx.TxOut)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x6 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x6
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                         let {
                           x7 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x7
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                         let {
                           x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                           [LclId]
                           x8
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.DCert.DCert
                                 (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.DCert.DCert)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.DCert.DCert)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                         let {
                           x9 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                  GHC.Integer.Type.Integer)]
                           [LclId]
                           x9
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                    GHC.Integer.Type.Integer)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Credential.StakingCredential
                                     @ GHC.Integer.Type.Integer
                                     (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Credential.StakingCredential)))
                                     (PlutusTx.Builtins.Internal.unsafeDataAsI
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> GHC.Integer.Type.Integer)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      GHC.Integer.Type.Integer))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                            GHC.Integer.Type.Integer)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                    GHC.Integer.Type.Integer))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Credential.StakingCredential,
                                                   GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                         let {
                           x10 [Occ=OnceL]
                             :: Plutus.V1.Ledger.Interval.Interval
                                  Plutus.V1.Ledger.Time.POSIXTime
                           [LclId]
                           x10
                             = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Time.POSIXTime
                                 (PlutusTx.Builtins.Internal.unsafeDataAsI
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Time.POSIXTime)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                         let {
                           x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                           [LclId]
                           x11
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                         let {
                           x12 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                  Plutus.V1.Ledger.Scripts.Datum)]
                           [LclId]
                           x12
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                    Plutus.V1.Ledger.Scripts.Datum)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Scripts.DatumHash
                                     @ Plutus.V1.Ledger.Scripts.Datum
                                     (PlutusTx.Builtins.Internal.unsafeDataAsB
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.DatumHash)))
                                     (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinData)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                            Plutus.V1.Ledger.Scripts.Datum)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                    Plutus.V1.Ledger.Scripts.Datum))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Scripts.DatumHash,
                                                   Plutus.V1.Ledger.Scripts.Datum))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                         let {
                           x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                           [LclId]
                           x13
                             = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                         let {
                           x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x14
                             = Plutus.V1.Ledger.Contexts.TxInfo
                                 x4
                                 x5
                                 (x6
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 (x7
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x8
                                 x9
                                 x10
                                 x11
                                 x12
                                 x13 } in
                         \ _ [Occ=Dead] -> x14
Context: Compiling expr: let {
                           t7
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t7
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                         let {
                           t8
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t8
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                         let {
                           x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                           [LclId]
                           x4
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Contexts.TxInInfo
                                 (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Contexts.TxInInfo)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                           [LclId]
                           x5
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Tx.TxOut
                                 (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Tx.TxOut)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Tx.TxOut)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x6 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x6
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                         let {
                           x7 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x7
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                         let {
                           x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                           [LclId]
                           x8
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.DCert.DCert
                                 (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.DCert.DCert)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.DCert.DCert)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                         let {
                           x9 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                  GHC.Integer.Type.Integer)]
                           [LclId]
                           x9
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                    GHC.Integer.Type.Integer)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Credential.StakingCredential
                                     @ GHC.Integer.Type.Integer
                                     (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Credential.StakingCredential)))
                                     (PlutusTx.Builtins.Internal.unsafeDataAsI
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> GHC.Integer.Type.Integer)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      GHC.Integer.Type.Integer))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                            GHC.Integer.Type.Integer)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                    GHC.Integer.Type.Integer))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Credential.StakingCredential,
                                                   GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                         let {
                           x10 [Occ=OnceL]
                             :: Plutus.V1.Ledger.Interval.Interval
                                  Plutus.V1.Ledger.Time.POSIXTime
                           [LclId]
                           x10
                             = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Time.POSIXTime
                                 (PlutusTx.Builtins.Internal.unsafeDataAsI
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Time.POSIXTime)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                         let {
                           x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                           [LclId]
                           x11
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                         let {
                           x12 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                  Plutus.V1.Ledger.Scripts.Datum)]
                           [LclId]
                           x12
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                    Plutus.V1.Ledger.Scripts.Datum)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Scripts.DatumHash
                                     @ Plutus.V1.Ledger.Scripts.Datum
                                     (PlutusTx.Builtins.Internal.unsafeDataAsB
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.DatumHash)))
                                     (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinData)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                            Plutus.V1.Ledger.Scripts.Datum)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                    Plutus.V1.Ledger.Scripts.Datum))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Scripts.DatumHash,
                                                   Plutus.V1.Ledger.Scripts.Datum))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                         let {
                           x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                           [LclId]
                           x13
                             = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                         let {
                           x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x14
                             = Plutus.V1.Ledger.Contexts.TxInfo
                                 x4
                                 x5
                                 (x6
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 (x7
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x8
                                 x9
                                 x10
                                 x11
                                 x12
                                 x13 } in
                         \ _ [Occ=Dead] -> x14
Context: Compiling expr: let {
                           t6
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t6
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                         let {
                           t7
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t7
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                         let {
                           t8
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t8
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                         let {
                           x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                           [LclId]
                           x4
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Contexts.TxInInfo
                                 (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Contexts.TxInInfo)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                           [LclId]
                           x5
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Tx.TxOut
                                 (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Tx.TxOut)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Tx.TxOut)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x6 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x6
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                         let {
                           x7 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x7
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                         let {
                           x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                           [LclId]
                           x8
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.DCert.DCert
                                 (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.DCert.DCert)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.DCert.DCert)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                         let {
                           x9 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                  GHC.Integer.Type.Integer)]
                           [LclId]
                           x9
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                    GHC.Integer.Type.Integer)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Credential.StakingCredential
                                     @ GHC.Integer.Type.Integer
                                     (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Credential.StakingCredential)))
                                     (PlutusTx.Builtins.Internal.unsafeDataAsI
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> GHC.Integer.Type.Integer)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      GHC.Integer.Type.Integer))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                            GHC.Integer.Type.Integer)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                    GHC.Integer.Type.Integer))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Credential.StakingCredential,
                                                   GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                         let {
                           x10 [Occ=OnceL]
                             :: Plutus.V1.Ledger.Interval.Interval
                                  Plutus.V1.Ledger.Time.POSIXTime
                           [LclId]
                           x10
                             = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Time.POSIXTime
                                 (PlutusTx.Builtins.Internal.unsafeDataAsI
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Time.POSIXTime)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                         let {
                           x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                           [LclId]
                           x11
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                         let {
                           x12 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                  Plutus.V1.Ledger.Scripts.Datum)]
                           [LclId]
                           x12
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                    Plutus.V1.Ledger.Scripts.Datum)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Scripts.DatumHash
                                     @ Plutus.V1.Ledger.Scripts.Datum
                                     (PlutusTx.Builtins.Internal.unsafeDataAsB
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.DatumHash)))
                                     (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinData)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                            Plutus.V1.Ledger.Scripts.Datum)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                    Plutus.V1.Ledger.Scripts.Datum))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Scripts.DatumHash,
                                                   Plutus.V1.Ledger.Scripts.Datum))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                         let {
                           x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                           [LclId]
                           x13
                             = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                         let {
                           x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x14
                             = Plutus.V1.Ledger.Contexts.TxInfo
                                 x4
                                 x5
                                 (x6
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 (x7
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x8
                                 x9
                                 x10
                                 x11
                                 x12
                                 x13 } in
                         \ _ [Occ=Dead] -> x14
Context: Compiling expr: let {
                           t5
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t5
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                         let {
                           t6
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t6
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                         let {
                           t7
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t7
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                         let {
                           t8
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t8
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                         let {
                           x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                           [LclId]
                           x4
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Contexts.TxInInfo
                                 (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Contexts.TxInInfo)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                           [LclId]
                           x5
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Tx.TxOut
                                 (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Tx.TxOut)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Tx.TxOut)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x6 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x6
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                         let {
                           x7 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x7
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                         let {
                           x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                           [LclId]
                           x8
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.DCert.DCert
                                 (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.DCert.DCert)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.DCert.DCert)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                         let {
                           x9 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                  GHC.Integer.Type.Integer)]
                           [LclId]
                           x9
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                    GHC.Integer.Type.Integer)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Credential.StakingCredential
                                     @ GHC.Integer.Type.Integer
                                     (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Credential.StakingCredential)))
                                     (PlutusTx.Builtins.Internal.unsafeDataAsI
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> GHC.Integer.Type.Integer)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      GHC.Integer.Type.Integer))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                            GHC.Integer.Type.Integer)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                    GHC.Integer.Type.Integer))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Credential.StakingCredential,
                                                   GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                         let {
                           x10 [Occ=OnceL]
                             :: Plutus.V1.Ledger.Interval.Interval
                                  Plutus.V1.Ledger.Time.POSIXTime
                           [LclId]
                           x10
                             = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Time.POSIXTime
                                 (PlutusTx.Builtins.Internal.unsafeDataAsI
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Time.POSIXTime)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                         let {
                           x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                           [LclId]
                           x11
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                         let {
                           x12 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                  Plutus.V1.Ledger.Scripts.Datum)]
                           [LclId]
                           x12
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                    Plutus.V1.Ledger.Scripts.Datum)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Scripts.DatumHash
                                     @ Plutus.V1.Ledger.Scripts.Datum
                                     (PlutusTx.Builtins.Internal.unsafeDataAsB
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.DatumHash)))
                                     (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinData)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                            Plutus.V1.Ledger.Scripts.Datum)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                    Plutus.V1.Ledger.Scripts.Datum))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Scripts.DatumHash,
                                                   Plutus.V1.Ledger.Scripts.Datum))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                         let {
                           x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                           [LclId]
                           x13
                             = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                         let {
                           x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x14
                             = Plutus.V1.Ledger.Contexts.TxInfo
                                 x4
                                 x5
                                 (x6
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 (x7
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x8
                                 x9
                                 x10
                                 x11
                                 x12
                                 x13 } in
                         \ _ [Occ=Dead] -> x14
Context: Compiling expr: let {
                           t4
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t4
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t3 } in
                         let {
                           t5
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t5
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                         let {
                           t6
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t6
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                         let {
                           t7
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t7
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                         let {
                           t8
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t8
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                         let {
                           x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                           [LclId]
                           x4
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Contexts.TxInInfo
                                 (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Contexts.TxInInfo)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                           [LclId]
                           x5
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Tx.TxOut
                                 (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Tx.TxOut)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Tx.TxOut)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x6 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x6
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                         let {
                           x7 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x7
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                         let {
                           x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                           [LclId]
                           x8
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.DCert.DCert
                                 (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.DCert.DCert)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.DCert.DCert)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                         let {
                           x9 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                  GHC.Integer.Type.Integer)]
                           [LclId]
                           x9
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                    GHC.Integer.Type.Integer)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Credential.StakingCredential
                                     @ GHC.Integer.Type.Integer
                                     (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Credential.StakingCredential)))
                                     (PlutusTx.Builtins.Internal.unsafeDataAsI
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> GHC.Integer.Type.Integer)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      GHC.Integer.Type.Integer))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                            GHC.Integer.Type.Integer)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                    GHC.Integer.Type.Integer))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Credential.StakingCredential,
                                                   GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                         let {
                           x10 [Occ=OnceL]
                             :: Plutus.V1.Ledger.Interval.Interval
                                  Plutus.V1.Ledger.Time.POSIXTime
                           [LclId]
                           x10
                             = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Time.POSIXTime
                                 (PlutusTx.Builtins.Internal.unsafeDataAsI
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Time.POSIXTime)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                         let {
                           x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                           [LclId]
                           x11
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                         let {
                           x12 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                  Plutus.V1.Ledger.Scripts.Datum)]
                           [LclId]
                           x12
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                    Plutus.V1.Ledger.Scripts.Datum)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Scripts.DatumHash
                                     @ Plutus.V1.Ledger.Scripts.Datum
                                     (PlutusTx.Builtins.Internal.unsafeDataAsB
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.DatumHash)))
                                     (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinData)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                            Plutus.V1.Ledger.Scripts.Datum)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                    Plutus.V1.Ledger.Scripts.Datum))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Scripts.DatumHash,
                                                   Plutus.V1.Ledger.Scripts.Datum))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                         let {
                           x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                           [LclId]
                           x13
                             = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                         let {
                           x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x14
                             = Plutus.V1.Ledger.Contexts.TxInfo
                                 x4
                                 x5
                                 (x6
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 (x7
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x8
                                 x9
                                 x10
                                 x11
                                 x12
                                 x13 } in
                         \ _ [Occ=Dead] -> x14
Context: Compiling expr: let {
                           t3
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t3
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t2 } in
                         let {
                           t4
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t4
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t3 } in
                         let {
                           t5
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t5
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                         let {
                           t6
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t6
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                         let {
                           t7
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t7
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                         let {
                           t8
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t8
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                         let {
                           x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                           [LclId]
                           x4
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Contexts.TxInInfo
                                 (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Contexts.TxInInfo)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                           [LclId]
                           x5
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Tx.TxOut
                                 (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Tx.TxOut)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Tx.TxOut)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x6 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x6
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                         let {
                           x7 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x7
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                         let {
                           x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                           [LclId]
                           x8
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.DCert.DCert
                                 (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.DCert.DCert)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.DCert.DCert)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                         let {
                           x9 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                  GHC.Integer.Type.Integer)]
                           [LclId]
                           x9
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                    GHC.Integer.Type.Integer)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Credential.StakingCredential
                                     @ GHC.Integer.Type.Integer
                                     (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Credential.StakingCredential)))
                                     (PlutusTx.Builtins.Internal.unsafeDataAsI
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> GHC.Integer.Type.Integer)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      GHC.Integer.Type.Integer))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                            GHC.Integer.Type.Integer)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                    GHC.Integer.Type.Integer))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Credential.StakingCredential,
                                                   GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                         let {
                           x10 [Occ=OnceL]
                             :: Plutus.V1.Ledger.Interval.Interval
                                  Plutus.V1.Ledger.Time.POSIXTime
                           [LclId]
                           x10
                             = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Time.POSIXTime
                                 (PlutusTx.Builtins.Internal.unsafeDataAsI
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Time.POSIXTime)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                         let {
                           x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                           [LclId]
                           x11
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                         let {
                           x12 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                  Plutus.V1.Ledger.Scripts.Datum)]
                           [LclId]
                           x12
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                    Plutus.V1.Ledger.Scripts.Datum)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Scripts.DatumHash
                                     @ Plutus.V1.Ledger.Scripts.Datum
                                     (PlutusTx.Builtins.Internal.unsafeDataAsB
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.DatumHash)))
                                     (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinData)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                            Plutus.V1.Ledger.Scripts.Datum)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                    Plutus.V1.Ledger.Scripts.Datum))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Scripts.DatumHash,
                                                   Plutus.V1.Ledger.Scripts.Datum))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                         let {
                           x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                           [LclId]
                           x13
                             = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                         let {
                           x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x14
                             = Plutus.V1.Ledger.Contexts.TxInfo
                                 x4
                                 x5
                                 (x6
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 (x7
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x8
                                 x9
                                 x10
                                 x11
                                 x12
                                 x13 } in
                         \ _ [Occ=Dead] -> x14
Context: Compiling expr: let {
                           t2
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t2
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t1 } in
                         let {
                           t3
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t3
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t2 } in
                         let {
                           t4
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t4
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t3 } in
                         let {
                           t5
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t5
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                         let {
                           t6
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t6
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                         let {
                           t7
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t7
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                         let {
                           t8
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t8
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                         let {
                           x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                           [LclId]
                           x4
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Contexts.TxInInfo
                                 (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Contexts.TxInInfo)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                           [LclId]
                           x5
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Tx.TxOut
                                 (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Tx.TxOut)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Tx.TxOut)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x6 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x6
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                         let {
                           x7 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x7
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                         let {
                           x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                           [LclId]
                           x8
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.DCert.DCert
                                 (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.DCert.DCert)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.DCert.DCert)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                         let {
                           x9 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                  GHC.Integer.Type.Integer)]
                           [LclId]
                           x9
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                    GHC.Integer.Type.Integer)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Credential.StakingCredential
                                     @ GHC.Integer.Type.Integer
                                     (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Credential.StakingCredential)))
                                     (PlutusTx.Builtins.Internal.unsafeDataAsI
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> GHC.Integer.Type.Integer)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      GHC.Integer.Type.Integer))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                            GHC.Integer.Type.Integer)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                    GHC.Integer.Type.Integer))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Credential.StakingCredential,
                                                   GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                         let {
                           x10 [Occ=OnceL]
                             :: Plutus.V1.Ledger.Interval.Interval
                                  Plutus.V1.Ledger.Time.POSIXTime
                           [LclId]
                           x10
                             = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Time.POSIXTime
                                 (PlutusTx.Builtins.Internal.unsafeDataAsI
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Time.POSIXTime)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                         let {
                           x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                           [LclId]
                           x11
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                         let {
                           x12 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                  Plutus.V1.Ledger.Scripts.Datum)]
                           [LclId]
                           x12
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                    Plutus.V1.Ledger.Scripts.Datum)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Scripts.DatumHash
                                     @ Plutus.V1.Ledger.Scripts.Datum
                                     (PlutusTx.Builtins.Internal.unsafeDataAsB
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.DatumHash)))
                                     (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinData)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                            Plutus.V1.Ledger.Scripts.Datum)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                    Plutus.V1.Ledger.Scripts.Datum))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Scripts.DatumHash,
                                                   Plutus.V1.Ledger.Scripts.Datum))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                         let {
                           x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                           [LclId]
                           x13
                             = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                         let {
                           x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x14
                             = Plutus.V1.Ledger.Contexts.TxInfo
                                 x4
                                 x5
                                 (x6
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 (x7
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x8
                                 x9
                                 x10
                                 x11
                                 x12
                                 x13 } in
                         \ _ [Occ=Dead] -> x14
Context: Compiling expr: let {
                           t1
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t1
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t } in
                         let {
                           t2
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t2
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t1 } in
                         let {
                           t3
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t3
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t2 } in
                         let {
                           t4
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t4
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t3 } in
                         let {
                           t5
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t5
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                         let {
                           t6
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t6
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                         let {
                           t7
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t7
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                         let {
                           t8
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t8
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                         let {
                           x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                           [LclId]
                           x4
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Contexts.TxInInfo
                                 (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Contexts.TxInInfo)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                           [LclId]
                           x5
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Tx.TxOut
                                 (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Tx.TxOut)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Tx.TxOut)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x6 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x6
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                         let {
                           x7 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x7
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                         let {
                           x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                           [LclId]
                           x8
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.DCert.DCert
                                 (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.DCert.DCert)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.DCert.DCert)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                         let {
                           x9 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                  GHC.Integer.Type.Integer)]
                           [LclId]
                           x9
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                    GHC.Integer.Type.Integer)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Credential.StakingCredential
                                     @ GHC.Integer.Type.Integer
                                     (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Credential.StakingCredential)))
                                     (PlutusTx.Builtins.Internal.unsafeDataAsI
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> GHC.Integer.Type.Integer)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      GHC.Integer.Type.Integer))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                            GHC.Integer.Type.Integer)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                    GHC.Integer.Type.Integer))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Credential.StakingCredential,
                                                   GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                         let {
                           x10 [Occ=OnceL]
                             :: Plutus.V1.Ledger.Interval.Interval
                                  Plutus.V1.Ledger.Time.POSIXTime
                           [LclId]
                           x10
                             = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Time.POSIXTime
                                 (PlutusTx.Builtins.Internal.unsafeDataAsI
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Time.POSIXTime)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                         let {
                           x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                           [LclId]
                           x11
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                         let {
                           x12 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                  Plutus.V1.Ledger.Scripts.Datum)]
                           [LclId]
                           x12
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                    Plutus.V1.Ledger.Scripts.Datum)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Scripts.DatumHash
                                     @ Plutus.V1.Ledger.Scripts.Datum
                                     (PlutusTx.Builtins.Internal.unsafeDataAsB
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.DatumHash)))
                                     (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinData)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                            Plutus.V1.Ledger.Scripts.Datum)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                    Plutus.V1.Ledger.Scripts.Datum))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Scripts.DatumHash,
                                                   Plutus.V1.Ledger.Scripts.Datum))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                         let {
                           x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                           [LclId]
                           x13
                             = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                         let {
                           x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x14
                             = Plutus.V1.Ledger.Contexts.TxInfo
                                 x4
                                 x5
                                 (x6
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 (x7
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x8
                                 x9
                                 x10
                                 x11
                                 x12
                                 x13 } in
                         \ _ [Occ=Dead] -> x14
Context: Compiling expr: let {
                           t :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t = PlutusTx.Builtins.Internal.snd
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup } in
                         let {
                           t1
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t1
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t } in
                         let {
                           t2
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t2
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t1 } in
                         let {
                           t3
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t3
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t2 } in
                         let {
                           t4
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t4
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t3 } in
                         let {
                           t5
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t5
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                         let {
                           t6
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t6
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                         let {
                           t7
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t7
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                         let {
                           t8
                             :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t8
                             = PlutusTx.Builtins.Internal.tail
                                 @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                         let {
                           x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                           [LclId]
                           x4
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Contexts.TxInInfo
                                 (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Contexts.TxInInfo)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                           [LclId]
                           x5
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Tx.TxOut
                                 (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.Tx.TxOut)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Tx.TxOut)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                         let {
                           x6 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x6
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                         let {
                           x7 [Occ=OnceL]
                             :: PlutusTx.AssocMap.Map
                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                  (PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                           [LclId]
                           x7
                             = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Value.CurrencySymbol
                                 @ (PlutusTx.AssocMap.Map
                                      Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Value.CurrencySymbol)))
                                 (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                             Plutus.V1.Ledger.Value.TokenName
                                                                                             GHC.Integer.Type.Integer>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                         let {
                           x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                           [LclId]
                           x8
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.DCert.DCert
                                 (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> Plutus.V1.Ledger.DCert.DCert)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.DCert.DCert)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                         let {
                           x9 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                  GHC.Integer.Type.Integer)]
                           [LclId]
                           x9
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                    GHC.Integer.Type.Integer)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Credential.StakingCredential
                                     @ GHC.Integer.Type.Integer
                                     (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Credential.StakingCredential)))
                                     (PlutusTx.Builtins.Internal.unsafeDataAsI
                                      `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> GHC.Integer.Type.Integer)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      GHC.Integer.Type.Integer))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                            GHC.Integer.Type.Integer)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                    GHC.Integer.Type.Integer))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Credential.StakingCredential,
                                                   GHC.Integer.Type.Integer))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                         let {
                           x10 [Occ=OnceL]
                             :: Plutus.V1.Ledger.Interval.Interval
                                  Plutus.V1.Ledger.Time.POSIXTime
                           [LclId]
                           x10
                             = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Time.POSIXTime
                                 (PlutusTx.Builtins.Internal.unsafeDataAsI
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> GHC.Integer.Type.Integer)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Time.POSIXTime)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                         let {
                           x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                           [LclId]
                           x11
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                 (PlutusTx.Builtins.Internal.unsafeDataAsB
                                  `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                           ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                         let {
                           x12 [Occ=OnceL]
                             :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                  Plutus.V1.Ledger.Scripts.Datum)]
                           [LclId]
                           x12
                             = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                 @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                    Plutus.V1.Ledger.Scripts.Datum)
                                 ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                     @ Plutus.V1.Ledger.Scripts.DatumHash
                                     @ Plutus.V1.Ledger.Scripts.Datum
                                     (PlutusTx.Builtins.Internal.unsafeDataAsB
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.DatumHash)))
                                     (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                      `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                               ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                              :: GHC.Types.Coercible
                                                   (PlutusTx.Builtins.Internal.BuiltinData
                                                    -> PlutusTx.Builtins.Internal.BuiltinData)
                                                   (PlutusTx.IsData.Class.UnsafeFromData
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                  `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                            Plutus.V1.Ledger.Scripts.Datum)>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.Builtins.Internal.BuiltinData
                                                -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                    Plutus.V1.Ledger.Scripts.Datum))
                                               (PlutusTx.IsData.Class.UnsafeFromData
                                                  (Plutus.V1.Ledger.Scripts.DatumHash,
                                                   Plutus.V1.Ledger.Scripts.Datum))))
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                         let {
                           x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                           [LclId]
                           x13
                             = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                         let {
                           x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x14
                             = Plutus.V1.Ledger.Contexts.TxInfo
                                 x4
                                 x5
                                 (x6
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 (x7
                                  `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                          :: GHC.Types.Coercible
                                               (PlutusTx.AssocMap.Map
                                                  Plutus.V1.Ledger.Value.CurrencySymbol
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.TokenName
                                                     GHC.Integer.Type.Integer))
                                               Plutus.V1.Ledger.Value.Value))
                                 x8
                                 x9
                                 x10
                                 x11
                                 x12
                                 x13 } in
                         \ _ [Occ=Dead] -> x14
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.TxInfo)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              t1
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t1
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t } in
                            let {
                              t2
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t2
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1 } in
                            let {
                              t3
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t3
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2 } in
                            let {
                              t4
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t4
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3 } in
                            let {
                              t5
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t5
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                            let {
                              t6
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t6
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                            let {
                              t7
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t7
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                            let {
                              t8
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t8
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                            let {
                              x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                              [LclId]
                              x4
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Contexts.TxInInfo
                                    (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Contexts.TxInInfo)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                              [LclId]
                              x5
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Tx.TxOut
                                    (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Tx.TxOut)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Tx.TxOut)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                            let {
                              x6 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x6
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                            let {
                              x7 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x7
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                            let {
                              x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                              [LclId]
                              x8
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.DCert.DCert
                                    (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.DCert.DCert)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.DCert.DCert)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                            let {
                              x9 [Occ=OnceL]
                                :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                     GHC.Integer.Type.Integer)]
                              [LclId]
                              x9
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                       GHC.Integer.Type.Integer)
                                    ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                        @ Plutus.V1.Ledger.Credential.StakingCredential
                                        @ GHC.Integer.Type.Integer
                                        (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                         `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Credential.StakingCredential)))
                                        (PlutusTx.Builtins.Internal.unsafeDataAsI
                                         `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> GHC.Integer.Type.Integer)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         GHC.Integer.Type.Integer))))
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                               GHC.Integer.Type.Integer)>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                       GHC.Integer.Type.Integer))
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (Plutus.V1.Ledger.Credential.StakingCredential,
                                                      GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                            let {
                              x10 [Occ=OnceL]
                                :: Plutus.V1.Ledger.Interval.Interval
                                     Plutus.V1.Ledger.Time.POSIXTime
                              [LclId]
                              x10
                                = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Time.POSIXTime
                                    (PlutusTx.Builtins.Internal.unsafeDataAsI
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Time.POSIXTime)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                            let {
                              x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                              [LclId]
                              x11
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                            let {
                              x12 [Occ=OnceL]
                                :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                     Plutus.V1.Ledger.Scripts.Datum)]
                              [LclId]
                              x12
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                       Plutus.V1.Ledger.Scripts.Datum)
                                    ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                        @ Plutus.V1.Ledger.Scripts.DatumHash
                                        @ Plutus.V1.Ledger.Scripts.Datum
                                        (PlutusTx.Builtins.Internal.unsafeDataAsB
                                         `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                  ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Scripts.DatumHash)))
                                        (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                         `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                  ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> PlutusTx.Builtins.Internal.BuiltinData)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Scripts.Datum))))
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                               Plutus.V1.Ledger.Scripts.Datum)>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                       Plutus.V1.Ledger.Scripts.Datum))
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (Plutus.V1.Ledger.Scripts.DatumHash,
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                            let {
                              x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                              [LclId]
                              x13
                                = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                            let {
                              x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x14
                                = Plutus.V1.Ledger.Contexts.TxInfo
                                    x4
                                    x5
                                    (x6
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    (x7
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    x8
                                    x9
                                    x10
                                    x11
                                    x12
                                    x13 } in
                            \ _ [Occ=Dead] -> x14)
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.TxInfo)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              t1
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t1
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t } in
                            let {
                              t2
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t2
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1 } in
                            let {
                              t3
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t3
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2 } in
                            let {
                              t4
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t4
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3 } in
                            let {
                              t5
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t5
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                            let {
                              t6
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t6
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                            let {
                              t7
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t7
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                            let {
                              t8
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t8
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                            let {
                              x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                              [LclId]
                              x4
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Contexts.TxInInfo
                                    (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Contexts.TxInInfo)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                              [LclId]
                              x5
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Tx.TxOut
                                    (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Tx.TxOut)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Tx.TxOut)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                            let {
                              x6 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x6
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                            let {
                              x7 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x7
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                            let {
                              x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                              [LclId]
                              x8
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.DCert.DCert
                                    (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.DCert.DCert)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.DCert.DCert)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                            let {
                              x9 [Occ=OnceL]
                                :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                     GHC.Integer.Type.Integer)]
                              [LclId]
                              x9
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                       GHC.Integer.Type.Integer)
                                    ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                        @ Plutus.V1.Ledger.Credential.StakingCredential
                                        @ GHC.Integer.Type.Integer
                                        (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                         `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Credential.StakingCredential)))
                                        (PlutusTx.Builtins.Internal.unsafeDataAsI
                                         `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> GHC.Integer.Type.Integer)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         GHC.Integer.Type.Integer))))
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                               GHC.Integer.Type.Integer)>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                       GHC.Integer.Type.Integer))
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (Plutus.V1.Ledger.Credential.StakingCredential,
                                                      GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                            let {
                              x10 [Occ=OnceL]
                                :: Plutus.V1.Ledger.Interval.Interval
                                     Plutus.V1.Ledger.Time.POSIXTime
                              [LclId]
                              x10
                                = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Time.POSIXTime
                                    (PlutusTx.Builtins.Internal.unsafeDataAsI
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Time.POSIXTime)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                            let {
                              x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                              [LclId]
                              x11
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                            let {
                              x12 [Occ=OnceL]
                                :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                     Plutus.V1.Ledger.Scripts.Datum)]
                              [LclId]
                              x12
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                       Plutus.V1.Ledger.Scripts.Datum)
                                    ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                        @ Plutus.V1.Ledger.Scripts.DatumHash
                                        @ Plutus.V1.Ledger.Scripts.Datum
                                        (PlutusTx.Builtins.Internal.unsafeDataAsB
                                         `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                  ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Scripts.DatumHash)))
                                        (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                         `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                  ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> PlutusTx.Builtins.Internal.BuiltinData)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Scripts.Datum))))
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                               Plutus.V1.Ledger.Scripts.Datum)>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                       Plutus.V1.Ledger.Scripts.Datum))
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (Plutus.V1.Ledger.Scripts.DatumHash,
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                            let {
                              x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                              [LclId]
                              x13
                                = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                            let {
                              x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x14
                                = Plutus.V1.Ledger.Contexts.TxInfo
                                    x4
                                    x5
                                    (x6
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    (x7
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    x8
                                    x9
                                    x10
                                    x11
                                    x12
                                    x13 } in
                            \ _ [Occ=Dead] -> x14)
                           (let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x4
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Contexts.TxInfo
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x4)
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.TxInfo)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              t1
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t1
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t } in
                            let {
                              t2
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t2
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1 } in
                            let {
                              t3
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t3
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2 } in
                            let {
                              t4
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t4
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3 } in
                            let {
                              t5
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t5
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                            let {
                              t6
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t6
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                            let {
                              t7
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t7
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                            let {
                              t8
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t8
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                            let {
                              x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                              [LclId]
                              x4
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Contexts.TxInInfo
                                    (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Contexts.TxInInfo)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                              [LclId]
                              x5
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Tx.TxOut
                                    (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Tx.TxOut)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Tx.TxOut)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                            let {
                              x6 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x6
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                            let {
                              x7 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x7
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                            let {
                              x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                              [LclId]
                              x8
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.DCert.DCert
                                    (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.DCert.DCert)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.DCert.DCert)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                            let {
                              x9 [Occ=OnceL]
                                :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                     GHC.Integer.Type.Integer)]
                              [LclId]
                              x9
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                       GHC.Integer.Type.Integer)
                                    ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                        @ Plutus.V1.Ledger.Credential.StakingCredential
                                        @ GHC.Integer.Type.Integer
                                        (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                         `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Credential.StakingCredential)))
                                        (PlutusTx.Builtins.Internal.unsafeDataAsI
                                         `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> GHC.Integer.Type.Integer)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         GHC.Integer.Type.Integer))))
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                               GHC.Integer.Type.Integer)>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                       GHC.Integer.Type.Integer))
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (Plutus.V1.Ledger.Credential.StakingCredential,
                                                      GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                            let {
                              x10 [Occ=OnceL]
                                :: Plutus.V1.Ledger.Interval.Interval
                                     Plutus.V1.Ledger.Time.POSIXTime
                              [LclId]
                              x10
                                = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Time.POSIXTime
                                    (PlutusTx.Builtins.Internal.unsafeDataAsI
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Time.POSIXTime)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                            let {
                              x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                              [LclId]
                              x11
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                            let {
                              x12 [Occ=OnceL]
                                :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                     Plutus.V1.Ledger.Scripts.Datum)]
                              [LclId]
                              x12
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                       Plutus.V1.Ledger.Scripts.Datum)
                                    ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                        @ Plutus.V1.Ledger.Scripts.DatumHash
                                        @ Plutus.V1.Ledger.Scripts.Datum
                                        (PlutusTx.Builtins.Internal.unsafeDataAsB
                                         `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                  ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Scripts.DatumHash)))
                                        (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                         `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                  ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> PlutusTx.Builtins.Internal.BuiltinData)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Scripts.Datum))))
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                               Plutus.V1.Ledger.Scripts.Datum)>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                       Plutus.V1.Ledger.Scripts.Datum))
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (Plutus.V1.Ledger.Scripts.DatumHash,
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                            let {
                              x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                              [LclId]
                              x13
                                = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                            let {
                              x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x14
                                = Plutus.V1.Ledger.Contexts.TxInfo
                                    x4
                                    x5
                                    (x6
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    (x7
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    x8
                                    x9
                                    x10
                                    x11
                                    x12
                                    x13 } in
                            \ _ [Occ=Dead] -> x14)
                           (let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x4
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Contexts.TxInfo
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x4)
                           PlutusTx.Builtins.Internal.unitval
Context: Compiling expr: let {
                           tup
                             :: PlutusTx.Builtins.Internal.BuiltinPair
                                  PlutusTx.Builtins.Internal.BuiltinInteger
                                  (PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData)
                           [LclId]
                           tup = PlutusTx.Builtins.Internal.unsafeDataAsConstr d } in
                         PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.TxInfo)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              t1
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t1
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t } in
                            let {
                              t2
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t2
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t1 } in
                            let {
                              t3
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t3
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t2 } in
                            let {
                              t4
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t4
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t3 } in
                            let {
                              t5
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t5
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                            let {
                              t6
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t6
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                            let {
                              t7
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t7
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                            let {
                              t8
                                :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t8
                                = PlutusTx.Builtins.Internal.tail
                                    @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                            let {
                              x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                              [LclId]
                              x4
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Contexts.TxInInfo
                                    (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Contexts.TxInInfo)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                              [LclId]
                              x5
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Tx.TxOut
                                    (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.Tx.TxOut)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Tx.TxOut)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                            let {
                              x6 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x6
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                            let {
                              x7 [Occ=OnceL]
                                :: PlutusTx.AssocMap.Map
                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                     (PlutusTx.AssocMap.Map
                                        Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                              [LclId]
                              x7
                                = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Value.CurrencySymbol
                                    @ (PlutusTx.AssocMap.Map
                                         Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Value.CurrencySymbol)))
                                    (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                Plutus.V1.Ledger.Value.TokenName
                                                                                                GHC.Integer.Type.Integer>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                            let {
                              x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                              [LclId]
                              x8
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.DCert.DCert
                                    (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> Plutus.V1.Ledger.DCert.DCert)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.DCert.DCert)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                            let {
                              x9 [Occ=OnceL]
                                :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                     GHC.Integer.Type.Integer)]
                              [LclId]
                              x9
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                       GHC.Integer.Type.Integer)
                                    ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                        @ Plutus.V1.Ledger.Credential.StakingCredential
                                        @ GHC.Integer.Type.Integer
                                        (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                         `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Credential.StakingCredential)))
                                        (PlutusTx.Builtins.Internal.unsafeDataAsI
                                         `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> GHC.Integer.Type.Integer)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         GHC.Integer.Type.Integer))))
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                               GHC.Integer.Type.Integer)>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                       GHC.Integer.Type.Integer))
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (Plutus.V1.Ledger.Credential.StakingCredential,
                                                      GHC.Integer.Type.Integer))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                            let {
                              x10 [Occ=OnceL]
                                :: Plutus.V1.Ledger.Interval.Interval
                                     Plutus.V1.Ledger.Time.POSIXTime
                              [LclId]
                              x10
                                = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Time.POSIXTime
                                    (PlutusTx.Builtins.Internal.unsafeDataAsI
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> GHC.Integer.Type.Integer)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Time.POSIXTime)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                            let {
                              x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                              [LclId]
                              x11
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                    (PlutusTx.Builtins.Internal.unsafeDataAsB
                                     `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                              ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                            let {
                              x12 [Occ=OnceL]
                                :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                     Plutus.V1.Ledger.Scripts.Datum)]
                              [LclId]
                              x12
                                = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                    @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                       Plutus.V1.Ledger.Scripts.Datum)
                                    ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                        @ Plutus.V1.Ledger.Scripts.DatumHash
                                        @ Plutus.V1.Ledger.Scripts.Datum
                                        (PlutusTx.Builtins.Internal.unsafeDataAsB
                                         `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                  ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Scripts.DatumHash)))
                                        (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                         `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                  ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                                 :: GHC.Types.Coercible
                                                      (PlutusTx.Builtins.Internal.BuiltinData
                                                       -> PlutusTx.Builtins.Internal.BuiltinData)
                                                      (PlutusTx.IsData.Class.UnsafeFromData
                                                         Plutus.V1.Ledger.Scripts.Datum))))
                                     `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                               Plutus.V1.Ledger.Scripts.Datum)>_N
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.Builtins.Internal.BuiltinData
                                                   -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                       Plutus.V1.Ledger.Scripts.Datum))
                                                  (PlutusTx.IsData.Class.UnsafeFromData
                                                     (Plutus.V1.Ledger.Scripts.DatumHash,
                                                      Plutus.V1.Ledger.Scripts.Datum))))
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                            let {
                              x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                              [LclId]
                              x13
                                = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                            let {
                              x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x14
                                = Plutus.V1.Ledger.Contexts.TxInfo
                                    x4
                                    x5
                                    (x6
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    (x7
                                     `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                             :: GHC.Types.Coercible
                                                  (PlutusTx.AssocMap.Map
                                                     Plutus.V1.Ledger.Value.CurrencySymbol
                                                     (PlutusTx.AssocMap.Map
                                                        Plutus.V1.Ledger.Value.TokenName
                                                        GHC.Integer.Type.Integer))
                                                  Plutus.V1.Ledger.Value.Value))
                                    x8
                                    x9
                                    x10
                                    x11
                                    x12
                                    x13 } in
                            \ _ [Occ=Dead] -> x14)
                           (let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x4
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Contexts.TxInfo
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x4)
                           PlutusTx.Builtins.Internal.unitval
Context: Compiling expr: \ (d [Occ=Once]
                              :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           let {
                             tup
                               :: PlutusTx.Builtins.Internal.BuiltinPair
                                    PlutusTx.Builtins.Internal.BuiltinInteger
                                    (PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData)
                             [LclId]
                             tup = PlutusTx.Builtins.Internal.unsafeDataAsConstr d } in
                           PlutusTx.Builtins.Internal.ifThenElse
                             @ (PlutusTx.Builtins.Internal.BuiltinUnit
                                -> Plutus.V1.Ledger.Contexts.TxInfo)
                             (PlutusTx.Builtins.Internal.equalsInteger
                                (PlutusTx.Builtins.Internal.fst
                                   @ PlutusTx.Builtins.Internal.BuiltinInteger
                                   @ (PlutusTx.Builtins.Internal.BuiltinList
                                        PlutusTx.Builtins.Internal.BuiltinData)
                                   tup)
                                0)
                             (let {
                                t :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t = PlutusTx.Builtins.Internal.snd
                                      @ PlutusTx.Builtins.Internal.BuiltinInteger
                                      @ (PlutusTx.Builtins.Internal.BuiltinList
                                           PlutusTx.Builtins.Internal.BuiltinData)
                                      tup } in
                              let {
                                t1
                                  :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t1
                                  = PlutusTx.Builtins.Internal.tail
                                      @ PlutusTx.Builtins.Internal.BuiltinData t } in
                              let {
                                t2
                                  :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t2
                                  = PlutusTx.Builtins.Internal.tail
                                      @ PlutusTx.Builtins.Internal.BuiltinData t1 } in
                              let {
                                t3
                                  :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t3
                                  = PlutusTx.Builtins.Internal.tail
                                      @ PlutusTx.Builtins.Internal.BuiltinData t2 } in
                              let {
                                t4
                                  :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t4
                                  = PlutusTx.Builtins.Internal.tail
                                      @ PlutusTx.Builtins.Internal.BuiltinData t3 } in
                              let {
                                t5
                                  :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t5
                                  = PlutusTx.Builtins.Internal.tail
                                      @ PlutusTx.Builtins.Internal.BuiltinData t4 } in
                              let {
                                t6
                                  :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t6
                                  = PlutusTx.Builtins.Internal.tail
                                      @ PlutusTx.Builtins.Internal.BuiltinData t5 } in
                              let {
                                t7
                                  :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t7
                                  = PlutusTx.Builtins.Internal.tail
                                      @ PlutusTx.Builtins.Internal.BuiltinData t6 } in
                              let {
                                t8
                                  :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t8
                                  = PlutusTx.Builtins.Internal.tail
                                      @ PlutusTx.Builtins.Internal.BuiltinData t7 } in
                              let {
                                x4 [Occ=OnceL] :: [Plutus.V1.Ledger.Contexts.TxInInfo]
                                [LclId]
                                x4
                                  = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                      @ Plutus.V1.Ledger.Contexts.TxInInfo
                                      (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData3
                                       `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Contexts.TxInInfo>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> Plutus.V1.Ledger.Contexts.TxInInfo)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       Plutus.V1.Ledger.Contexts.TxInInfo)))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                              let {
                                x5 [Occ=OnceL] :: [Plutus.V1.Ledger.Tx.TxOut]
                                [LclId]
                                x5
                                  = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                      @ Plutus.V1.Ledger.Tx.TxOut
                                      (Plutus.V1.Ledger.Tx.$fUnsafeFromDataTxOut_$cunsafeFromBuiltinData
                                       `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Tx.TxOut>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> Plutus.V1.Ledger.Tx.TxOut)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       Plutus.V1.Ledger.Tx.TxOut)))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t1) } in
                              let {
                                x6 [Occ=OnceL]
                                  :: PlutusTx.AssocMap.Map
                                       Plutus.V1.Ledger.Value.CurrencySymbol
                                       (PlutusTx.AssocMap.Map
                                          Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                [LclId]
                                x6
                                  = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                      @ Plutus.V1.Ledger.Value.CurrencySymbol
                                      @ (PlutusTx.AssocMap.Map
                                           Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                      (PlutusTx.Builtins.Internal.unsafeDataAsB
                                       `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       Plutus.V1.Ledger.Value.CurrencySymbol)))
                                      (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                       `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                  Plutus.V1.Ledger.Value.TokenName
                                                                                                  GHC.Integer.Type.Integer>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> PlutusTx.AssocMap.Map
                                                          Plutus.V1.Ledger.Value.TokenName
                                                          GHC.Integer.Type.Integer)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       (PlutusTx.AssocMap.Map
                                                          Plutus.V1.Ledger.Value.TokenName
                                                          GHC.Integer.Type.Integer))))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t2) } in
                              let {
                                x7 [Occ=OnceL]
                                  :: PlutusTx.AssocMap.Map
                                       Plutus.V1.Ledger.Value.CurrencySymbol
                                       (PlutusTx.AssocMap.Map
                                          Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                [LclId]
                                x7
                                  = PlutusTx.AssocMap.$fUnsafeFromDataMap_$cunsafeFromBuiltinData
                                      @ Plutus.V1.Ledger.Value.CurrencySymbol
                                      @ (PlutusTx.AssocMap.Map
                                           Plutus.V1.Ledger.Value.TokenName GHC.Integer.Type.Integer)
                                      (PlutusTx.Builtins.Internal.unsafeDataAsB
                                       `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                ->_R Sym (Plutus.V1.Ledger.Value.N:CurrencySymbol[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Value.CurrencySymbol>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       Plutus.V1.Ledger.Value.CurrencySymbol)))
                                      (Plutus.V1.Ledger.Value.$fUnsafeFromDataValue2
                                       `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <PlutusTx.AssocMap.Map
                                                                                                  Plutus.V1.Ledger.Value.TokenName
                                                                                                  GHC.Integer.Type.Integer>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> PlutusTx.AssocMap.Map
                                                          Plutus.V1.Ledger.Value.TokenName
                                                          GHC.Integer.Type.Integer)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       (PlutusTx.AssocMap.Map
                                                          Plutus.V1.Ledger.Value.TokenName
                                                          GHC.Integer.Type.Integer))))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t3) } in
                              let {
                                x8 [Occ=OnceL] :: [Plutus.V1.Ledger.DCert.DCert]
                                [LclId]
                                x8
                                  = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                      @ Plutus.V1.Ledger.DCert.DCert
                                      (Plutus.V1.Ledger.DCert.$fUnsafeFromDataDCert_$cunsafeFromBuiltinData
                                       `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.DCert.DCert>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> Plutus.V1.Ledger.DCert.DCert)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       Plutus.V1.Ledger.DCert.DCert)))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t4) } in
                              let {
                                x9 [Occ=OnceL]
                                  :: [(Plutus.V1.Ledger.Credential.StakingCredential,
                                       GHC.Integer.Type.Integer)]
                                [LclId]
                                x9
                                  = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                      @ (Plutus.V1.Ledger.Credential.StakingCredential,
                                         GHC.Integer.Type.Integer)
                                      ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                          @ Plutus.V1.Ledger.Credential.StakingCredential
                                          @ GHC.Integer.Type.Integer
                                          (Plutus.V1.Ledger.Credential.$fUnsafeFromDataStakingCredential_$cunsafeFromBuiltinData
                                           `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Credential.StakingCredential>_N
                                                   :: GHC.Types.Coercible
                                                        (PlutusTx.Builtins.Internal.BuiltinData
                                                         -> Plutus.V1.Ledger.Credential.StakingCredential)
                                                        (PlutusTx.IsData.Class.UnsafeFromData
                                                           Plutus.V1.Ledger.Credential.StakingCredential)))
                                          (PlutusTx.Builtins.Internal.unsafeDataAsI
                                           `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <GHC.Integer.Type.Integer>_N
                                                   :: GHC.Types.Coercible
                                                        (PlutusTx.Builtins.Internal.BuiltinData
                                                         -> GHC.Integer.Type.Integer)
                                                        (PlutusTx.IsData.Class.UnsafeFromData
                                                           GHC.Integer.Type.Integer))))
                                       `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Credential.StakingCredential,
                                                                                                 GHC.Integer.Type.Integer)>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> (Plutus.V1.Ledger.Credential.StakingCredential,
                                                         GHC.Integer.Type.Integer))
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       (Plutus.V1.Ledger.Credential.StakingCredential,
                                                        GHC.Integer.Type.Integer))))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t5) } in
                              let {
                                x10 [Occ=OnceL]
                                  :: Plutus.V1.Ledger.Interval.Interval
                                       Plutus.V1.Ledger.Time.POSIXTime
                                [LclId]
                                x10
                                  = Plutus.V1.Ledger.Interval.$fUnsafeFromDataInterval_$cunsafeFromBuiltinData
                                      @ Plutus.V1.Ledger.Time.POSIXTime
                                      (PlutusTx.Builtins.Internal.unsafeDataAsI
                                       `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                ->_R Sym (Plutus.V1.Ledger.Time.N:POSIXTime[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Time.POSIXTime>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> GHC.Integer.Type.Integer)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       Plutus.V1.Ledger.Time.POSIXTime)))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t6) } in
                              let {
                                x11 [Occ=OnceL] :: [Plutus.V1.Ledger.Crypto.PubKeyHash]
                                [LclId]
                                x11
                                  = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                      @ Plutus.V1.Ledger.Crypto.PubKeyHash
                                      (PlutusTx.Builtins.Internal.unsafeDataAsB
                                       `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                ->_R Sym (Plutus.V1.Ledger.Crypto.N:PubKeyHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Crypto.PubKeyHash>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       Plutus.V1.Ledger.Crypto.PubKeyHash)))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t7) } in
                              let {
                                x12 [Occ=OnceL]
                                  :: [(Plutus.V1.Ledger.Scripts.DatumHash,
                                       Plutus.V1.Ledger.Scripts.Datum)]
                                [LclId]
                                x12
                                  = PlutusTx.IsData.Class.$fUnsafeFromData[]_$cunsafeFromBuiltinData
                                      @ (Plutus.V1.Ledger.Scripts.DatumHash,
                                         Plutus.V1.Ledger.Scripts.Datum)
                                      ((PlutusTx.IsData.Instances.$fUnsafeFromData(,)_$cunsafeFromBuiltinData
                                          @ Plutus.V1.Ledger.Scripts.DatumHash
                                          @ Plutus.V1.Ledger.Scripts.Datum
                                          (PlutusTx.Builtins.Internal.unsafeDataAsB
                                           `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                    ->_R Sym (Plutus.V1.Ledger.Scripts.N:DatumHash[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.DatumHash>_N
                                                   :: GHC.Types.Coercible
                                                        (PlutusTx.Builtins.Internal.BuiltinData
                                                         -> PlutusTx.Builtins.Internal.BuiltinByteString)
                                                        (PlutusTx.IsData.Class.UnsafeFromData
                                                           Plutus.V1.Ledger.Scripts.DatumHash)))
                                          (PlutusTx.IsData.Class.$fUnsafeFromDataBuiltinData_$cunsafeFromBuiltinData
                                           `cast` ((<PlutusTx.Builtins.Internal.BuiltinData>_R
                                                    ->_R Sym (Plutus.V1.Ledger.Scripts.N:Datum[0])) ; Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <Plutus.V1.Ledger.Scripts.Datum>_N
                                                   :: GHC.Types.Coercible
                                                        (PlutusTx.Builtins.Internal.BuiltinData
                                                         -> PlutusTx.Builtins.Internal.BuiltinData)
                                                        (PlutusTx.IsData.Class.UnsafeFromData
                                                           Plutus.V1.Ledger.Scripts.Datum))))
                                       `cast` (Sym (PlutusTx.IsData.Class.N:UnsafeFromData[0]) <(Plutus.V1.Ledger.Scripts.DatumHash,
                                                                                                 Plutus.V1.Ledger.Scripts.Datum)>_N
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.Builtins.Internal.BuiltinData
                                                     -> (Plutus.V1.Ledger.Scripts.DatumHash,
                                                         Plutus.V1.Ledger.Scripts.Datum))
                                                    (PlutusTx.IsData.Class.UnsafeFromData
                                                       (Plutus.V1.Ledger.Scripts.DatumHash,
                                                        Plutus.V1.Ledger.Scripts.Datum))))
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t8) } in
                              let {
                                x13 [Occ=OnceL] :: Plutus.V1.Ledger.TxId.TxId
                                [LclId]
                                x13
                                  = Plutus.V1.Ledger.TxId.$fUnsafeFromDataTxId_$cunsafeFromBuiltinData
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData
                                         (PlutusTx.Builtins.Internal.tail
                                            @ PlutusTx.Builtins.Internal.BuiltinData t8)) } in
                              let {
                                x14 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                                [LclId]
                                x14
                                  = Plutus.V1.Ledger.Contexts.TxInfo
                                      x4
                                      x5
                                      (x6
                                       `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.CurrencySymbol
                                                       (PlutusTx.AssocMap.Map
                                                          Plutus.V1.Ledger.Value.TokenName
                                                          GHC.Integer.Type.Integer))
                                                    Plutus.V1.Ledger.Value.Value))
                                      (x7
                                       `cast` (Sym (Plutus.V1.Ledger.Value.N:Value[0])
                                               :: GHC.Types.Coercible
                                                    (PlutusTx.AssocMap.Map
                                                       Plutus.V1.Ledger.Value.CurrencySymbol
                                                       (PlutusTx.AssocMap.Map
                                                          Plutus.V1.Ledger.Value.TokenName
                                                          GHC.Integer.Type.Integer))
                                                    Plutus.V1.Ledger.Value.Value))
                                      x8
                                      x9
                                      x10
                                      x11
                                      x12
                                      x13 } in
                              \ _ [Occ=Dead] -> x14)
                             (let {
                                x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                                [LclId]
                                x4
                                  = PlutusTx.Builtins.Internal.error
                                      @ Plutus.V1.Ledger.Contexts.TxInfo
                                      (case PlutusTx.Builtins.Internal.trace
                                              @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                       of
                                       { () ->
                                       PlutusTx.Builtins.Internal.unitval
                                       }) } in
                              \ _ [Occ=Dead] -> x4)
                             PlutusTx.Builtins.Internal.unitval
Context: Compiling definition of: Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData2
Context: Compiling expr: Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData2
Context: Compiling expr: Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData2
                           (PlutusTx.Builtins.Internal.head
                              @ PlutusTx.Builtins.Internal.BuiltinData t)
Context: Compiling expr: let {
                           x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x4
                             = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData2
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptPurpose
                           [LclId]
                           x5
                             = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData1
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                         let {
                           x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                           [LclId]
                           x6 = Plutus.V1.Ledger.Contexts.ScriptContext x4 x5 } in
                         \ _ [Occ=Dead] -> x6
Context: Compiling expr: let {
                           t :: PlutusTx.Builtins.Internal.BuiltinList
                                  PlutusTx.Builtins.Internal.BuiltinData
                           [LclId]
                           t = PlutusTx.Builtins.Internal.snd
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup } in
                         let {
                           x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                           [LclId]
                           x4
                             = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData2
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                         let {
                           x5 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptPurpose
                           [LclId]
                           x5
                             = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData1
                                 (PlutusTx.Builtins.Internal.head
                                    @ PlutusTx.Builtins.Internal.BuiltinData
                                    (PlutusTx.Builtins.Internal.tail
                                       @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                         let {
                           x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                           [LclId]
                           x6 = Plutus.V1.Ledger.Contexts.ScriptContext x4 x5 } in
                         \ _ [Occ=Dead] -> x6
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.ScriptContext)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x4
                                = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData2
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptPurpose
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData1
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                              [LclId]
                              x6 = Plutus.V1.Ledger.Contexts.ScriptContext x4 x5 } in
                            \ _ [Occ=Dead] -> x6)
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.ScriptContext)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x4
                                = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData2
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptPurpose
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData1
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                              [LclId]
                              x6 = Plutus.V1.Ledger.Contexts.ScriptContext x4 x5 } in
                            \ _ [Occ=Dead] -> x6)
                           (let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                              [LclId]
                              x4
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Contexts.ScriptContext
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x4)
Context: Compiling expr: PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.ScriptContext)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x4
                                = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData2
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptPurpose
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData1
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                              [LclId]
                              x6 = Plutus.V1.Ledger.Contexts.ScriptContext x4 x5 } in
                            \ _ [Occ=Dead] -> x6)
                           (let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                              [LclId]
                              x4
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Contexts.ScriptContext
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x4)
                           PlutusTx.Builtins.Internal.unitval
Context: Compiling expr: let {
                           tup
                             :: PlutusTx.Builtins.Internal.BuiltinPair
                                  PlutusTx.Builtins.Internal.BuiltinInteger
                                  (PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData)
                           [LclId]
                           tup = PlutusTx.Builtins.Internal.unsafeDataAsConstr d } in
                         PlutusTx.Builtins.Internal.ifThenElse
                           @ (PlutusTx.Builtins.Internal.BuiltinUnit
                              -> Plutus.V1.Ledger.Contexts.ScriptContext)
                           (PlutusTx.Builtins.Internal.equalsInteger
                              (PlutusTx.Builtins.Internal.fst
                                 @ PlutusTx.Builtins.Internal.BuiltinInteger
                                 @ (PlutusTx.Builtins.Internal.BuiltinList
                                      PlutusTx.Builtins.Internal.BuiltinData)
                                 tup)
                              0)
                           (let {
                              t :: PlutusTx.Builtins.Internal.BuiltinList
                                     PlutusTx.Builtins.Internal.BuiltinData
                              [LclId]
                              t = PlutusTx.Builtins.Internal.snd
                                    @ PlutusTx.Builtins.Internal.BuiltinInteger
                                    @ (PlutusTx.Builtins.Internal.BuiltinList
                                         PlutusTx.Builtins.Internal.BuiltinData)
                                    tup } in
                            let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                              [LclId]
                              x4
                                = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData2
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                            let {
                              x5 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptPurpose
                              [LclId]
                              x5
                                = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData1
                                    (PlutusTx.Builtins.Internal.head
                                       @ PlutusTx.Builtins.Internal.BuiltinData
                                       (PlutusTx.Builtins.Internal.tail
                                          @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                            let {
                              x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                              [LclId]
                              x6 = Plutus.V1.Ledger.Contexts.ScriptContext x4 x5 } in
                            \ _ [Occ=Dead] -> x6)
                           (let {
                              x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                              [LclId]
                              x4
                                = PlutusTx.Builtins.Internal.error
                                    @ Plutus.V1.Ledger.Contexts.ScriptContext
                                    (case PlutusTx.Builtins.Internal.trace
                                            @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                     of
                                     { () ->
                                     PlutusTx.Builtins.Internal.unitval
                                     }) } in
                            \ _ [Occ=Dead] -> x4)
                           PlutusTx.Builtins.Internal.unitval
Context: Compiling expr: \ (d [Occ=Once]
                              :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           let {
                             tup
                               :: PlutusTx.Builtins.Internal.BuiltinPair
                                    PlutusTx.Builtins.Internal.BuiltinInteger
                                    (PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData)
                             [LclId]
                             tup = PlutusTx.Builtins.Internal.unsafeDataAsConstr d } in
                           PlutusTx.Builtins.Internal.ifThenElse
                             @ (PlutusTx.Builtins.Internal.BuiltinUnit
                                -> Plutus.V1.Ledger.Contexts.ScriptContext)
                             (PlutusTx.Builtins.Internal.equalsInteger
                                (PlutusTx.Builtins.Internal.fst
                                   @ PlutusTx.Builtins.Internal.BuiltinInteger
                                   @ (PlutusTx.Builtins.Internal.BuiltinList
                                        PlutusTx.Builtins.Internal.BuiltinData)
                                   tup)
                                0)
                             (let {
                                t :: PlutusTx.Builtins.Internal.BuiltinList
                                       PlutusTx.Builtins.Internal.BuiltinData
                                [LclId]
                                t = PlutusTx.Builtins.Internal.snd
                                      @ PlutusTx.Builtins.Internal.BuiltinInteger
                                      @ (PlutusTx.Builtins.Internal.BuiltinList
                                           PlutusTx.Builtins.Internal.BuiltinData)
                                      tup } in
                              let {
                                x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.TxInfo
                                [LclId]
                                x4
                                  = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData2
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData t) } in
                              let {
                                x5 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptPurpose
                                [LclId]
                                x5
                                  = Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData1
                                      (PlutusTx.Builtins.Internal.head
                                         @ PlutusTx.Builtins.Internal.BuiltinData
                                         (PlutusTx.Builtins.Internal.tail
                                            @ PlutusTx.Builtins.Internal.BuiltinData t)) } in
                              let {
                                x6 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                                [LclId]
                                x6 = Plutus.V1.Ledger.Contexts.ScriptContext x4 x5 } in
                              \ _ [Occ=Dead] -> x6)
                             (let {
                                x4 [Occ=OnceL] :: Plutus.V1.Ledger.Contexts.ScriptContext
                                [LclId]
                                x4
                                  = PlutusTx.Builtins.Internal.error
                                      @ Plutus.V1.Ledger.Contexts.ScriptContext
                                      (case PlutusTx.Builtins.Internal.trace
                                              @ () PlutusTx.ErrorCodes.reconstructCaseError GHC.Tuple.()
                                       of
                                       { () ->
                                       PlutusTx.Builtins.Internal.unitval
                                       }) } in
                              \ _ [Occ=Dead] -> x4)
                             PlutusTx.Builtins.Internal.unitval
Context: Compiling definition of: Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
Context: Compiling expr: Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
Context: Compiling expr: Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                           p
Context: Compiling expr: f (($dUnsafeFromData_ayg3
                             `cast` (PlutusTx.IsData.Class.N:UnsafeFromData[0] <r>_N
                                     :: GHC.Types.Coercible
                                          (PlutusTx.IsData.Class.UnsafeFromData r)
                                          (PlutusTx.Builtins.Internal.BuiltinData -> r)))
                              r)
                           (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                              p)
Context: Compiling expr: case f (($dUnsafeFromData_ayg3
                                  `cast` (PlutusTx.IsData.Class.N:UnsafeFromData[0] <r>_N
                                          :: GHC.Types.Coercible
                                               (PlutusTx.IsData.Class.UnsafeFromData r)
                                               (PlutusTx.Builtins.Internal.BuiltinData -> r)))
                                   r)
                                (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                   p)
                         of {
                           GHC.Types.False ->
                             PlutusTx.Trace.traceError
                               @ () PlutusTx.ErrorCodes.checkHasFailedError;
                           GHC.Types.True -> GHC.Tuple.()
                         }
Context: Compiling expr: \ (p [Occ=Once]
                              :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           case f (($dUnsafeFromData_ayg3
                                    `cast` (PlutusTx.IsData.Class.N:UnsafeFromData[0] <r>_N
                                            :: GHC.Types.Coercible
                                                 (PlutusTx.IsData.Class.UnsafeFromData r)
                                                 (PlutusTx.Builtins.Internal.BuiltinData -> r)))
                                     r)
                                  (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                     p)
                           of {
                             GHC.Types.False ->
                               PlutusTx.Trace.traceError
                                 @ () PlutusTx.ErrorCodes.checkHasFailedError;
                             GHC.Types.True -> GHC.Tuple.()
                           }
Context: Compiling expr: \ (r [Occ=Once]
                              :: PlutusTx.Builtins.Internal.BuiltinData)
                           (p [Occ=Once] :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           case f (($dUnsafeFromData_ayg3
                                    `cast` (PlutusTx.IsData.Class.N:UnsafeFromData[0] <r>_N
                                            :: GHC.Types.Coercible
                                                 (PlutusTx.IsData.Class.UnsafeFromData r)
                                                 (PlutusTx.Builtins.Internal.BuiltinData -> r)))
                                     r)
                                  (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                     p)
                           of {
                             GHC.Types.False ->
                               PlutusTx.Trace.traceError
                                 @ () PlutusTx.ErrorCodes.checkHasFailedError;
                             GHC.Types.True -> GHC.Tuple.()
                           }
Context: Compiling expr: \ (f [Occ=Once!]
                              :: r -> Plutus.V1.Ledger.Contexts.ScriptContext -> GHC.Types.Bool)
                           (r [Occ=Once] :: PlutusTx.Builtins.Internal.BuiltinData)
                           (p [Occ=Once] :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           case f (($dUnsafeFromData_ayg3
                                    `cast` (PlutusTx.IsData.Class.N:UnsafeFromData[0] <r>_N
                                            :: GHC.Types.Coercible
                                                 (PlutusTx.IsData.Class.UnsafeFromData r)
                                                 (PlutusTx.Builtins.Internal.BuiltinData -> r)))
                                     r)
                                  (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                     p)
                           of {
                             GHC.Types.False ->
                               PlutusTx.Trace.traceError
                                 @ () PlutusTx.ErrorCodes.checkHasFailedError;
                             GHC.Types.True -> GHC.Tuple.()
                           }
Context: Compiling expr: \ ($dUnsafeFromData_ayg3 [Occ=Once]
                              :: PlutusTx.IsData.Class.UnsafeFromData r)
                           (f [Occ=Once!]
                              :: r -> Plutus.V1.Ledger.Contexts.ScriptContext -> GHC.Types.Bool)
                           (r [Occ=Once] :: PlutusTx.Builtins.Internal.BuiltinData)
                           (p [Occ=Once] :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           case f (($dUnsafeFromData_ayg3
                                    `cast` (PlutusTx.IsData.Class.N:UnsafeFromData[0] <r>_N
                                            :: GHC.Types.Coercible
                                                 (PlutusTx.IsData.Class.UnsafeFromData r)
                                                 (PlutusTx.Builtins.Internal.BuiltinData -> r)))
                                     r)
                                  (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                     p)
                           of {
                             GHC.Types.False ->
                               PlutusTx.Trace.traceError
                                 @ () PlutusTx.ErrorCodes.checkHasFailedError;
                             GHC.Types.True -> GHC.Tuple.()
                           }
Context: Compiling expr: \ (@ r)
                           ($dUnsafeFromData_ayg3 [Occ=Once]
                              :: PlutusTx.IsData.Class.UnsafeFromData r)
                           (f [Occ=Once!]
                              :: r -> Plutus.V1.Ledger.Contexts.ScriptContext -> GHC.Types.Bool)
                           (r [Occ=Once] :: PlutusTx.Builtins.Internal.BuiltinData)
                           (p [Occ=Once] :: PlutusTx.Builtins.Internal.BuiltinData) ->
                           case f (($dUnsafeFromData_ayg3
                                    `cast` (PlutusTx.IsData.Class.N:UnsafeFromData[0] <r>_N
                                            :: GHC.Types.Coercible
                                                 (PlutusTx.IsData.Class.UnsafeFromData r)
                                                 (PlutusTx.Builtins.Internal.BuiltinData -> r)))
                                     r)
                                  (Plutus.V1.Ledger.Contexts.$fUnsafeFromDataScriptContext_$cunsafeFromBuiltinData
                                     p)
                           of {
                             GHC.Types.False ->
                               PlutusTx.Trace.traceError
                                 @ () PlutusTx.ErrorCodes.checkHasFailedError;
                             GHC.Types.True -> GHC.Tuple.()
                           }
Context: Compiling definition of: Plutus.V1.Utils.Typed.Scripts.MonetaryPolicies.wrapMintingPolicy
Context: Compiling expr: Plutus.V1.Utils.Typed.Scripts.MonetaryPolicies.wrapMintingPolicy
Context: Compiling expr: Plutus.V1.Utils.Typed.Scripts.MonetaryPolicies.wrapMintingPolicy
                           @ ()
Context: Compiling expr: Plutus.V1.Utils.Typed.Scripts.MonetaryPolicies.wrapMintingPolicy
                           @ () PlutusTx.IsData.Instances.$fUnsafeFromData()
Context: Compiling expr: Plutus.V1.Utils.Typed.Scripts.MonetaryPolicies.wrapMintingPolicy
                           @ ()
                           PlutusTx.IsData.Instances.$fUnsafeFromData()
                           (Plutus.V1.Utils.Typed.Scripts.MonetaryPolicies.forwardToValidator
                              ds_dyQc)
Context: Compiling expr: \ (ds_dyQc
                              :: Plutus.V1.Ledger.Scripts.ValidatorHash) ->
                           Plutus.V1.Utils.Typed.Scripts.MonetaryPolicies.wrapMintingPolicy
                             @ ()
                             PlutusTx.IsData.Instances.$fUnsafeFromData()
                             (Plutus.V1.Utils.Typed.Scripts.MonetaryPolicies.forwardToValidator
                                ds_dyQc)
Context: Compiling expr at "plutus-script-utils-0.1.0.0-inplace:Plutus.V1.Utils.Typed.Scripts.MonetaryPolicies:(50,11)-(50,105)"
