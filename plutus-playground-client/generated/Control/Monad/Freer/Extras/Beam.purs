-- File auto generated by purescript-bridge! --
module Control.Monad.Freer.Extras.Beam where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype BeamError = SqlError String

derive instance Eq BeamError

instance Show BeamError where
  show a = genericShow a

instance EncodeJson BeamError where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson BeamError where
  decodeJson = defer \_ -> D.decode $ (SqlError <$> D.value)

derive instance Generic BeamError _

derive instance Newtype BeamError _

--------------------------------------------------------------------------------

_SqlError :: Iso' BeamError String
_SqlError = _Newtype

--------------------------------------------------------------------------------

newtype BeamLog = SqlLog String

derive instance Eq BeamLog

instance Show BeamLog where
  show a = genericShow a

instance EncodeJson BeamLog where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance DecodeJson BeamLog where
  decodeJson = defer \_ -> D.decode $ (SqlLog <$> D.value)

derive instance Generic BeamLog _

derive instance Newtype BeamLog _

--------------------------------------------------------------------------------

_SqlLog :: Iso' BeamLog String
_SqlLog = _Newtype
