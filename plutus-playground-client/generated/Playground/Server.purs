-- File auto generated by servant-purescript! --
module Playground.Server where

import Prelude

import Affjax.RequestHeader (RequestHeader(..))
import Auth (AuthStatus)
import Control.Monad.Except (ExceptT)
import Data.Argonaut (Json, JsonDecodeError)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Array (catMaybes)
import Data.Either (Either(..))
import Data.Foldable (fold)
import Data.HTTP.Method (Method(..))
import Data.Maybe (Maybe(..))
import Data.Tuple (Tuple(..))
import Gist (Gist, GistId, NewGist)
import Language.Haskell.Interpreter (InterpreterError, InterpreterResult, SourceCode)
import Playground.Types (CompilationResult, Evaluation, EvaluationResult, PlaygroundError)
import Servant.PureScript (class MonadAjax, flagQueryPairs, paramListQueryPairs, paramQueryPairs, request, toHeader, toPathSegment)
import URI (PathAbsolute(..), RelativePart(..), RelativeRef(..))
import URI.Path.Segment (segmentNZFromString)
import Affjax.RequestBody (json) as Request
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.String.NonEmpty as NES

postContract ::
  forall e m.
  MonadAjax JsonDecodeError Json e m =>
  SourceCode ->
  ExceptT e m (Either InterpreterError (InterpreterResult CompilationResult))
postContract reqBody =
  request req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left POST
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Just reqBody
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.value
  decoder = (D.either D.value D.value)
  relativePart = RelativePartNoAuth $ Just
    [ "contract"
    ]
  query = Nothing

postEvaluate ::
  forall e m.
  MonadAjax JsonDecodeError Json e m =>
  Evaluation ->
  ExceptT e m (Either PlaygroundError EvaluationResult)
postEvaluate reqBody =
  request req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left POST
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Just reqBody
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.value
  decoder = (D.either D.value D.value)
  relativePart = RelativePartNoAuth $ Just
    [ "evaluate"
    ]
  query = Nothing

getHealth ::
  forall e m.
  MonadAjax JsonDecodeError Json e m =>
  ExceptT e m Unit
getHealth =
  request req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.unit
  relativePart = RelativePartNoAuth $ Just
    [ "health"
    ]
  query = Nothing

getOauthStatus ::
  forall e m.
  MonadAjax JsonDecodeError Json e m =>
  ExceptT e m AuthStatus
getOauthStatus =
  request req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "oauth"
    , "status"
    ]
  query = Nothing

getOauthGithub ::
  forall e m.
  MonadAjax JsonDecodeError Json e m =>
  ExceptT e m Unit
getOauthGithub =
  request req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.unit
  relativePart = RelativePartNoAuth $ Just
    [ "oauth"
    , "github"
    ]
  query = Nothing

getGists ::
  forall e m.
  MonadAjax JsonDecodeError Json e m =>
  ExceptT e m (Array Gist)
getGists =
  request req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "gists"
    ]
  query = Nothing

postGists ::
  forall e m.
  MonadAjax JsonDecodeError Json e m =>
  NewGist ->
  ExceptT e m Gist
postGists reqBody =
  request req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left POST
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Just reqBody
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.value
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "gists"
    ]
  query = Nothing

getGistsByGistId ::
  forall e m.
  MonadAjax JsonDecodeError Json e m =>
  GistId ->
  ExceptT e m Gist
getGistsByGistId gistId =
  request req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left GET
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Nothing
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.null
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "gists"
    , toPathSegment gistId
    ]
  query = Nothing

postGistsByGistId ::
  forall e m.
  MonadAjax JsonDecodeError Json e m =>
  NewGist ->
  GistId ->
  ExceptT e m Gist
postGistsByGistId reqBody gistId =
  request req
  where
  req = { method, uri, headers, content, encode, decode }
  method = Left POST
  uri = RelativeRef relativePart query Nothing
  headers = catMaybes
    [
    ]
  content = Just reqBody
  encode = E.encode encoder
  decode = D.decode decoder
  encoder = E.value
  decoder = D.value
  relativePart = RelativePartNoAuth $ Just
    [ "gists"
    , toPathSegment gistId
    ]
  query = Nothing
