-- File auto generated by purescript-bridge! --
module Plutus.V2.Ledger.Tx where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Plutus.V1.Ledger.Scripts (DatumHash)
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

data OutputDatum
  = NoOutputDatum
  | OutputDatumHash DatumHash
  | OutputDatum String

derive instance Eq OutputDatum

instance Show OutputDatum where
  show a = genericShow a

instance EncodeJson OutputDatum where
  encodeJson = defer \_ -> case _ of
    NoOutputDatum -> encodeJson { tag: "NoOutputDatum", contents: jsonNull }
    OutputDatumHash a -> E.encodeTagged "OutputDatumHash" a E.value
    OutputDatum a -> E.encodeTagged "OutputDatum" a E.value

instance DecodeJson OutputDatum where
  decodeJson = defer \_ -> D.decode
    $ D.sumType "OutputDatum"
    $ Map.fromFoldable
        [ "NoOutputDatum" /\ pure NoOutputDatum
        , "OutputDatumHash" /\ D.content (OutputDatumHash <$> D.value)
        , "OutputDatum" /\ D.content (OutputDatum <$> D.value)
        ]

derive instance Generic OutputDatum _

--------------------------------------------------------------------------------

_NoOutputDatum :: Prism' OutputDatum Unit
_NoOutputDatum = prism' (const NoOutputDatum) case _ of
  NoOutputDatum -> Just unit
  _ -> Nothing

_OutputDatumHash :: Prism' OutputDatum DatumHash
_OutputDatumHash = prism' OutputDatumHash case _ of
  (OutputDatumHash a) -> Just a
  _ -> Nothing

_OutputDatum :: Prism' OutputDatum String
_OutputDatum = prism' OutputDatum case _ of
  (OutputDatum a) -> Just a
  _ -> Nothing
