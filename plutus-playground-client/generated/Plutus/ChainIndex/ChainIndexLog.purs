-- File auto generated by purescript-bridge! --
module Plutus.ChainIndex.ChainIndexLog where

import Prelude

import Control.Lazy (defer)
import Control.Monad.Freer.Extras.Beam (BeamLog)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Bounded.Generic (genericBottom, genericTop)
import Data.Enum (class Enum)
import Data.Enum.Generic (genericPred, genericSucc)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Ledger.Tx.CardanoAPI (FromCardanoError)
import Plutus.ChainIndex.ChainIndexError (ChainIndexError)
import Plutus.ChainIndex.Types (Tip)
import Plutus.V1.Ledger.Tx (TxOut, TxOutRef)
import Plutus.V1.Ledger.TxId (TxId)
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

data ChainIndexLog
  = InsertionSuccess Tip InsertUtxoPosition
  | ConversionFailed FromCardanoError
  | RollbackSuccess Tip
  | Err ChainIndexError
  | TxNotFound TxId
  | TxOutNotFound TxOutRef
  | TipIsGenesis
  | NoDatumScriptAddr TxOut
  | BeamLogItem BeamLog

derive instance Eq ChainIndexLog

instance Show ChainIndexLog where
  show a = genericShow a

instance EncodeJson ChainIndexLog where
  encodeJson = defer \_ -> case _ of
    InsertionSuccess a b -> E.encodeTagged "InsertionSuccess" (a /\ b) (E.tuple (E.value >/\< E.value))
    ConversionFailed a -> E.encodeTagged "ConversionFailed" a E.value
    RollbackSuccess a -> E.encodeTagged "RollbackSuccess" a E.value
    Err a -> E.encodeTagged "Err" a E.value
    TxNotFound a -> E.encodeTagged "TxNotFound" a E.value
    TxOutNotFound a -> E.encodeTagged "TxOutNotFound" a E.value
    TipIsGenesis -> encodeJson { tag: "TipIsGenesis", contents: jsonNull }
    NoDatumScriptAddr a -> E.encodeTagged "NoDatumScriptAddr" a E.value
    BeamLogItem a -> E.encodeTagged "BeamLogItem" a E.value

instance DecodeJson ChainIndexLog where
  decodeJson = defer \_ -> D.decode
    $ D.sumType "ChainIndexLog" $ Map.fromFoldable
      [ "InsertionSuccess" /\ D.content (D.tuple $ InsertionSuccess </$\>D.value </*\> D.value)
      , "ConversionFailed" /\ D.content (ConversionFailed <$> D.value)
      , "RollbackSuccess" /\ D.content (RollbackSuccess <$> D.value)
      , "Err" /\ D.content (Err <$> D.value)
      , "TxNotFound" /\ D.content (TxNotFound <$> D.value)
      , "TxOutNotFound" /\ D.content (TxOutNotFound <$> D.value)
      , "TipIsGenesis" /\ pure TipIsGenesis
      , "NoDatumScriptAddr" /\ D.content (NoDatumScriptAddr <$> D.value)
      , "BeamLogItem" /\ D.content (BeamLogItem <$> D.value)
      ]

derive instance Generic ChainIndexLog _

--------------------------------------------------------------------------------

_InsertionSuccess :: Prism' ChainIndexLog {a :: Tip, b :: InsertUtxoPosition}
_InsertionSuccess = prism' (\{a, b} -> (InsertionSuccess a b)) case _ of
  (InsertionSuccess a b) -> Just {a, b}
  _ -> Nothing

_ConversionFailed :: Prism' ChainIndexLog FromCardanoError
_ConversionFailed = prism' ConversionFailed case _ of
  (ConversionFailed a) -> Just a
  _ -> Nothing

_RollbackSuccess :: Prism' ChainIndexLog Tip
_RollbackSuccess = prism' RollbackSuccess case _ of
  (RollbackSuccess a) -> Just a
  _ -> Nothing

_Err :: Prism' ChainIndexLog ChainIndexError
_Err = prism' Err case _ of
  (Err a) -> Just a
  _ -> Nothing

_TxNotFound :: Prism' ChainIndexLog TxId
_TxNotFound = prism' TxNotFound case _ of
  (TxNotFound a) -> Just a
  _ -> Nothing

_TxOutNotFound :: Prism' ChainIndexLog TxOutRef
_TxOutNotFound = prism' TxOutNotFound case _ of
  (TxOutNotFound a) -> Just a
  _ -> Nothing

_TipIsGenesis :: Prism' ChainIndexLog Unit
_TipIsGenesis = prism' (const TipIsGenesis) case _ of
  TipIsGenesis -> Just unit
  _ -> Nothing

_NoDatumScriptAddr :: Prism' ChainIndexLog TxOut
_NoDatumScriptAddr = prism' NoDatumScriptAddr case _ of
  (NoDatumScriptAddr a) -> Just a
  _ -> Nothing

_BeamLogItem :: Prism' ChainIndexLog BeamLog
_BeamLogItem = prism' BeamLogItem case _ of
  (BeamLogItem a) -> Just a
  _ -> Nothing

--------------------------------------------------------------------------------

data InsertUtxoPosition
  = InsertAtEnd
  | InsertBeforeEnd

derive instance Eq InsertUtxoPosition

derive instance Ord InsertUtxoPosition

instance Show InsertUtxoPosition where
  show a = genericShow a

instance EncodeJson InsertUtxoPosition where
  encodeJson = defer \_ -> E.encode E.enum

instance DecodeJson InsertUtxoPosition where
  decodeJson = defer \_ -> D.decode D.enum

derive instance Generic InsertUtxoPosition _

instance Enum InsertUtxoPosition where
  succ = genericSucc
  pred = genericPred

instance Bounded InsertUtxoPosition where
  bottom = genericBottom
  top = genericTop

--------------------------------------------------------------------------------

_InsertAtEnd :: Prism' InsertUtxoPosition Unit
_InsertAtEnd = prism' (const InsertAtEnd) case _ of
  InsertAtEnd -> Just unit
  _ -> Nothing

_InsertBeforeEnd :: Prism' InsertUtxoPosition Unit
_InsertBeforeEnd = prism' (const InsertBeforeEnd) case _ of
  InsertBeforeEnd -> Just unit
  _ -> Nothing
