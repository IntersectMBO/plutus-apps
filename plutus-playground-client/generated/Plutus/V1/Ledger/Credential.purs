-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Credential where

import Prelude
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.BigInt.Argonaut (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Plutus.V1.Ledger.Crypto (PubKeyHash)
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

data Credential
  = PubKeyCredential PubKeyHash
  | ScriptCredential String

derive instance eqCredential :: Eq Credential

derive instance ordCredential :: Ord Credential

instance showCredential :: Show Credential where
  show a = genericShow a

instance encodeJsonCredential :: EncodeJson Credential where
  encodeJson =
    defer \_ -> case _ of
      PubKeyCredential a -> E.encodeTagged "PubKeyCredential" a E.value
      ScriptCredential a -> E.encodeTagged "ScriptCredential" a E.value

instance decodeJsonCredential :: DecodeJson Credential where
  decodeJson =
    defer \_ ->
      D.decode
        $ D.sumType "Credential"
        $ Map.fromFoldable
            [ "PubKeyCredential" /\ D.content (PubKeyCredential <$> D.value)
            , "ScriptCredential" /\ D.content (ScriptCredential <$> D.value)
            ]

derive instance genericCredential :: Generic Credential _

--------------------------------------------------------------------------------
_PubKeyCredential :: Prism' Credential PubKeyHash
_PubKeyCredential =
  prism' PubKeyCredential case _ of
    (PubKeyCredential a) -> Just a
    _ -> Nothing

_ScriptCredential :: Prism' Credential String
_ScriptCredential =
  prism' ScriptCredential case _ of
    (ScriptCredential a) -> Just a
    _ -> Nothing

--------------------------------------------------------------------------------
data StakingCredential
  = StakingHash Credential
  | StakingPtr BigInt BigInt BigInt

derive instance eqStakingCredential :: Eq StakingCredential

derive instance ordStakingCredential :: Ord StakingCredential

instance showStakingCredential :: Show StakingCredential where
  show a = genericShow a

instance encodeJsonStakingCredential :: EncodeJson StakingCredential where
  encodeJson =
    defer \_ -> case _ of
      StakingHash a -> E.encodeTagged "StakingHash" a E.value
      StakingPtr a b c -> E.encodeTagged "StakingPtr" (a /\ b /\ c) (E.tuple (E.value >/\< E.value >/\< E.value))

instance decodeJsonStakingCredential :: DecodeJson StakingCredential where
  decodeJson =
    defer \_ ->
      D.decode
        $ D.sumType "StakingCredential"
        $ Map.fromFoldable
            [ "StakingHash" /\ D.content (StakingHash <$> D.value)
            , "StakingPtr" /\ D.content (D.tuple $ StakingPtr </$\> D.value </*\> D.value </*\> D.value)
            ]

derive instance genericStakingCredential :: Generic StakingCredential _

--------------------------------------------------------------------------------
_StakingHash :: Prism' StakingCredential Credential
_StakingHash =
  prism' StakingHash case _ of
    (StakingHash a) -> Just a
    _ -> Nothing

_StakingPtr :: Prism' StakingCredential { a :: BigInt, b :: BigInt, c :: BigInt }
_StakingPtr =
  prism' (\{ a, b, c } -> (StakingPtr a b c)) case _ of
    (StakingPtr a b c) -> Just { a, b, c }
    _ -> Nothing
