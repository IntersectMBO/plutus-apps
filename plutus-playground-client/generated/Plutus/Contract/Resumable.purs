-- File auto generated by purescript-bridge! --
module Plutus.Contract.Resumable where

import Prelude
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype Request a
  = Request
  { rqID :: RequestID
  , itID :: IterationID
  , rqRequest :: a
  }

derive instance eqRequest :: (Eq a) => Eq (Request a)

instance showRequest :: (Show a) => Show (Request a) where
  show a = genericShow a

instance encodeJsonRequest :: (EncodeJson a) => EncodeJson (Request a) where
  encodeJson =
    defer \_ ->
      E.encode $ unwrap
        >$< ( E.record
              { rqID: E.value :: _ RequestID
              , itID: E.value :: _ IterationID
              , rqRequest: E.value :: _ a
              }
          )

instance decodeJsonRequest :: (DecodeJson a) => DecodeJson (Request a) where
  decodeJson =
    defer \_ ->
      D.decode
        $ ( Request
              <$> D.record "Request"
                  { rqID: D.value :: _ RequestID
                  , itID: D.value :: _ IterationID
                  , rqRequest: D.value :: _ a
                  }
          )

derive instance genericRequest :: Generic (Request a) _

derive instance newtypeRequest :: Newtype (Request a) _

--------------------------------------------------------------------------------
_Request :: forall a. Iso' (Request a) { rqID :: RequestID, itID :: IterationID, rqRequest :: a }
_Request = _Newtype

--------------------------------------------------------------------------------
newtype Response a
  = Response
  { rspRqID :: RequestID
  , rspItID :: IterationID
  , rspResponse :: a
  }

derive instance eqResponse :: (Eq a) => Eq (Response a)

instance showResponse :: (Show a) => Show (Response a) where
  show a = genericShow a

instance encodeJsonResponse :: (EncodeJson a) => EncodeJson (Response a) where
  encodeJson =
    defer \_ ->
      E.encode $ unwrap
        >$< ( E.record
              { rspRqID: E.value :: _ RequestID
              , rspItID: E.value :: _ IterationID
              , rspResponse: E.value :: _ a
              }
          )

instance decodeJsonResponse :: (DecodeJson a) => DecodeJson (Response a) where
  decodeJson =
    defer \_ ->
      D.decode
        $ ( Response
              <$> D.record "Response"
                  { rspRqID: D.value :: _ RequestID
                  , rspItID: D.value :: _ IterationID
                  , rspResponse: D.value :: _ a
                  }
          )

derive instance genericResponse :: Generic (Response a) _

derive instance newtypeResponse :: Newtype (Response a) _

--------------------------------------------------------------------------------
_Response :: forall a. Iso' (Response a) { rspRqID :: RequestID, rspItID :: IterationID, rspResponse :: a }
_Response = _Newtype

--------------------------------------------------------------------------------
newtype RequestID
  = RequestID Int

derive instance eqRequestID :: Eq RequestID

derive instance ordRequestID :: Ord RequestID

instance showRequestID :: Show RequestID where
  show a = genericShow a

instance encodeJsonRequestID :: EncodeJson RequestID where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance decodeJsonRequestID :: DecodeJson RequestID where
  decodeJson = defer \_ -> D.decode $ (RequestID <$> D.value)

derive instance genericRequestID :: Generic RequestID _

derive instance newtypeRequestID :: Newtype RequestID _

--------------------------------------------------------------------------------
_RequestID :: Iso' RequestID Int
_RequestID = _Newtype

--------------------------------------------------------------------------------
newtype IterationID
  = IterationID Int

derive instance eqIterationID :: Eq IterationID

derive instance ordIterationID :: Ord IterationID

instance showIterationID :: Show IterationID where
  show a = genericShow a

instance encodeJsonIterationID :: EncodeJson IterationID where
  encodeJson = defer \_ -> E.encode $ unwrap >$< E.value

instance decodeJsonIterationID :: DecodeJson IterationID where
  decodeJson = defer \_ -> D.decode $ (IterationID <$> D.value)

derive instance genericIterationID :: Generic IterationID _

derive instance newtypeIterationID :: Newtype IterationID _

--------------------------------------------------------------------------------
_IterationID :: Iso' IterationID Int
_IterationID = _Newtype
