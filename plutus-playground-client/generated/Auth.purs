-- File auto generated by purescript-bridge! --
module Auth where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Bounded.Generic (genericBottom, genericTop)
import Data.Enum (class Enum)
import Data.Enum.Generic (genericPred, genericSucc)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

data AuthRole
  = Anonymous
  | GithubUser

derive instance Eq AuthRole

derive instance Ord AuthRole

instance Show AuthRole where
  show a = genericShow a

instance EncodeJson AuthRole where
  encodeJson = defer \_ -> E.encode E.enum

instance DecodeJson AuthRole where
  decodeJson = defer \_ -> D.decode D.enum

derive instance Generic AuthRole _

instance Enum AuthRole where
  succ = genericSucc
  pred = genericPred

instance Bounded AuthRole where
  bottom = genericBottom
  top = genericTop

--------------------------------------------------------------------------------

_Anonymous :: Prism' AuthRole Unit
_Anonymous = prism' (const Anonymous) case _ of
  Anonymous -> Just unit
  _ -> Nothing

_GithubUser :: Prism' AuthRole Unit
_GithubUser = prism' (const GithubUser) case _ of
  GithubUser -> Just unit
  _ -> Nothing

--------------------------------------------------------------------------------

newtype AuthStatus = AuthStatus { _authStatusAuthRole :: AuthRole }

derive instance Eq AuthStatus

instance Show AuthStatus where
  show a = genericShow a

instance EncodeJson AuthStatus where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { _authStatusAuthRole: E.value :: _ AuthRole }
    )

instance DecodeJson AuthStatus where
  decodeJson = defer \_ -> D.decode $ (AuthStatus <$> D.record "AuthStatus" { _authStatusAuthRole: D.value :: _ AuthRole })

derive instance Generic AuthStatus _

derive instance Newtype AuthStatus _

--------------------------------------------------------------------------------

_AuthStatus :: Iso' AuthStatus { _authStatusAuthRole :: AuthRole }
_AuthStatus = _Newtype

authStatusAuthRole :: Lens' AuthStatus AuthRole
authStatusAuthRole = _Newtype <<< prop (Proxy :: _ "_authStatusAuthRole")
