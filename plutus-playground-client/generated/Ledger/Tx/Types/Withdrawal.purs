-- File auto generated by purescript-bridge! --
module Ledger.Tx.Types.Withdrawal where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.BigInt.Argonaut (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Plutus.V1.Ledger.Credential (Credential)
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype Withdrawal = Withdrawal
  { withdrawalCredential :: Credential
  , withdrawalAmount :: BigInt
  , withdrawalRedeemer :: Maybe String
  }

derive instance Eq Withdrawal

instance Show Withdrawal where
  show a = genericShow a

instance EncodeJson Withdrawal where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { withdrawalCredential: E.value :: _ Credential
        , withdrawalAmount: E.value :: _ BigInt
        , withdrawalRedeemer: (E.maybe E.value) :: _ (Maybe String)
        }
    )

instance DecodeJson Withdrawal where
  decodeJson = defer \_ -> D.decode $
    ( Withdrawal <$> D.record "Withdrawal"
        { withdrawalCredential: D.value :: _ Credential
        , withdrawalAmount: D.value :: _ BigInt
        , withdrawalRedeemer: (D.maybe D.value) :: _ (Maybe String)
        }
    )

derive instance Generic Withdrawal _

derive instance Newtype Withdrawal _

--------------------------------------------------------------------------------

_Withdrawal :: Iso' Withdrawal { withdrawalCredential :: Credential, withdrawalAmount :: BigInt, withdrawalRedeemer :: Maybe String }
_Withdrawal = _Newtype
