-- File auto generated by purescript-bridge! --
module Ledger.CardanoWallet where

import Prelude
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.BigInt.Argonaut (BigInt)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype WalletNumber
  = WalletNumber { getWallet :: BigInt }

derive instance eqWalletNumber :: Eq WalletNumber

instance showWalletNumber :: Show WalletNumber where
  show a = genericShow a

instance encodeJsonWalletNumber :: EncodeJson WalletNumber where
  encodeJson =
    defer \_ ->
      E.encode $ unwrap
        >$< ( E.record
              { getWallet: E.value :: _ BigInt }
          )

instance decodeJsonWalletNumber :: DecodeJson WalletNumber where
  decodeJson = defer \_ -> D.decode $ (WalletNumber <$> D.record "WalletNumber" { getWallet: D.value :: _ BigInt })

derive instance genericWalletNumber :: Generic WalletNumber _

derive instance newtypeWalletNumber :: Newtype WalletNumber _

--------------------------------------------------------------------------------
_WalletNumber :: Iso' WalletNumber { getWallet :: BigInt }
_WalletNumber = _Newtype
