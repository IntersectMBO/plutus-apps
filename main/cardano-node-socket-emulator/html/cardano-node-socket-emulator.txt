-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


@package cardano-node-socket-emulator
@version 1.2.0.0

module Cardano.Node.Socket.Emulator.API
type API = "healthcheck" :> Get '[JSON] NoContent :<|> "mock" :> NodeAPI
type NodeAPI = "consume-event-history" :> Post '[JSON] EmulatorLogs


-- | This module exports data types for logging, events and configuration
module Cardano.Node.Socket.Emulator.Types
type Tip = Tip (CardanoBlock StandardCrypto)
type TxPool = [CardanoTx]
data SocketEmulatorState
SocketEmulatorState :: EmulatorState -> TChan Block -> Tip -> SocketEmulatorState
[_emulatorState] :: SocketEmulatorState -> EmulatorState
[_channel] :: SocketEmulatorState -> TChan Block
[_tip] :: SocketEmulatorState -> Tip
tip :: Lens' SocketEmulatorState Tip
emulatorState :: Lens' SocketEmulatorState EmulatorState
channel :: Lens' SocketEmulatorState (TChan Block)

-- | Node server configuration
data NodeServerConfig
NodeServerConfig :: BaseUrl -> [WalletNumber] -> FilePath -> Integer -> SlotConfig -> NetworkId -> Maybe FilePath -> NodeServerConfig

-- | base url of the service
[nscBaseUrl] :: NodeServerConfig -> BaseUrl

-- | The wallets that receive money from the initial transaction.
[nscInitialTxWallets] :: NodeServerConfig -> [WalletNumber]

-- | Path to the socket used to communicate with the server.
[nscSocketPath] :: NodeServerConfig -> FilePath

-- | The number of blocks to keep for replaying to newly connected clients
[nscKeptBlocks] :: NodeServerConfig -> Integer

-- | Beginning of slot 0.
[nscSlotConfig] :: NodeServerConfig -> SlotConfig

-- | NetworkId that's used with the CardanoAPI.
[nscNetworkId] :: NodeServerConfig -> NetworkId

-- | Path to a JSON file containing the protocol parameters
[nscProtocolParametersJsonPath] :: NodeServerConfig -> Maybe FilePath
defaultNodeServerConfig :: NodeServerConfig

-- | Application State
data AppState
AppState :: SocketEmulatorState -> EmulatorLogs -> AppState

-- | blockchain state
[_socketEmulatorState] :: AppState -> SocketEmulatorState

-- | history of all log messages
[_emulatorLogs] :: AppState -> EmulatorLogs
socketEmulatorState :: Lens' AppState SocketEmulatorState
emulatorLogs :: Lens' AppState EmulatorLogs
fromEmulatorChainState :: MonadIO m => EmulatorState -> m SocketEmulatorState

-- | <tt>ChainState</tt> with initial values
initialChainState :: MonadIO m => Map CardanoAddress Value -> m SocketEmulatorState
getChannel :: MonadIO m => MVar AppState -> m (TChan Block)
getTip :: MonadIO m => MVar AppState -> m Tip
setTip :: MonadIO m => MVar AppState -> Block -> m ()

-- | Top-level logging data type for structural logging inside the CNSE
--   server.
data CNSEServerLogMsg
StartingSlotCoordination :: UTCTime -> Millisecond -> CNSEServerLogMsg
StartingCNSEServer :: Int -> CNSEServerLogMsg
ProcessingEmulatorMsg :: EmulatorMsg -> CNSEServerLogMsg

-- | The node protocols require a block header type.
newtype BlockId
BlockId :: ShortByteString -> BlockId
[getBlockId] :: BlockId -> ShortByteString

-- | A hash of the block's contents.
blockId :: Block -> BlockId

-- | Protocol versions
nodeToClientVersion :: NodeToClientVersion

-- | A temporary definition of the protocol version. This will be moved as
--   an argument to the client connection function in a future PR (the
--   network magic number matches the one in the test net created by
--   scripts)
nodeToClientVersionData :: NodeToClientVersionData

-- | A protocol client that will never leave the initial state.
doNothingInitiatorProtocol :: MonadTimer m => RunMiniProtocol 'InitiatorMode ByteString m a Void
doNothingResponderProtocol :: MonadTimer m => RunMiniProtocol 'ResponderMode ByteString m Void a

-- | Boilerplate codecs used for protocol serialisation.
--   
--   The number of epochSlots is specific to each blockchain instance. This
--   value is what the cardano main and testnet uses. Only applies to the
--   Byron era.
epochSlots :: EpochSlots
codecVersion :: BlockNodeToClientVersion (CardanoBlock StandardCrypto)
codecConfig :: CodecConfig (CardanoBlock StandardCrypto)
nodeToClientCodecs :: forall m. MonadST m => ClientCodecs (CardanoBlock StandardCrypto) m

-- | These codecs are currently used in the mock nodes and will probably
--   soon get removed as the mock nodes are phased out.
chainSyncCodec :: block ~ CardanoBlock StandardCrypto => Codec (ChainSync block (Point block) Tip) DeserialiseFailure IO ByteString
txSubmissionCodec :: block ~ CardanoBlock StandardCrypto => Codec (LocalTxSubmission (GenTx block) (ApplyTxErr block)) DeserialiseFailure IO ByteString
toCardanoBlock :: Header StandardCrypto -> Block -> CardanoBlock StandardCrypto
fromCardanoBlock :: CardanoBlock StandardCrypto -> Block
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Node.Socket.Emulator.Types.CNSEServerLogMsg
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Node.Socket.Emulator.Types.CNSEServerLogMsg
instance GHC.Show.Show Cardano.Node.Socket.Emulator.Types.CNSEServerLogMsg
instance GHC.Generics.Generic Cardano.Node.Socket.Emulator.Types.CNSEServerLogMsg
instance Prettyprinter.Internal.Pretty Cardano.Node.Socket.Emulator.Types.BlockId
instance Codec.Serialise.Class.Serialise Cardano.Node.Socket.Emulator.Types.BlockId
instance GHC.Generics.Generic Cardano.Node.Socket.Emulator.Types.BlockId
instance GHC.Classes.Ord Cardano.Node.Socket.Emulator.Types.BlockId
instance GHC.Classes.Eq Cardano.Node.Socket.Emulator.Types.BlockId
instance GHC.Show.Show Cardano.Node.Socket.Emulator.Types.BlockId
instance Prettyprinter.Internal.Pretty Cardano.Node.Socket.Emulator.Types.CNSEServerLogMsg
instance Data.Aeson.Types.ToJSON.ToJSON Cardano.Node.Socket.Emulator.Types.NodeServerConfig
instance Data.Aeson.Types.FromJSON.FromJSON Cardano.Node.Socket.Emulator.Types.NodeServerConfig
instance GHC.Generics.Generic Cardano.Node.Socket.Emulator.Types.NodeServerConfig
instance GHC.Classes.Eq Cardano.Node.Socket.Emulator.Types.NodeServerConfig
instance GHC.Show.Show Cardano.Node.Socket.Emulator.Types.NodeServerConfig
instance GHC.Show.Show Cardano.Node.Socket.Emulator.Types.AppState
instance Data.Default.Class.Default Cardano.Node.Socket.Emulator.Types.NodeServerConfig
instance Prettyprinter.Internal.Pretty Cardano.Node.Socket.Emulator.Types.NodeServerConfig
instance GHC.Show.Show Cardano.Node.Socket.Emulator.Types.SocketEmulatorState
instance GHC.Generics.Generic Cardano.Node.Socket.Emulator.Types.SocketEmulatorState

module Cardano.Node.Socket.Emulator.Params
fromNodeServerConfig :: NodeServerConfig -> IO Params
readProtocolParameters :: Maybe FilePath -> IO ProtocolParameters

module Plutus.Monitoring.Util

-- | Handle the <a>LogMsg</a> effect by logging messages to a <a>Trace</a>
handleLogMsgTrace :: forall a m effs. (LastMember m effs, MonadIO m) => Trace m a -> LogMsg a ~> Eff effs

-- | Handle the <a>LogMsg</a> effect by logging messages to a mapped
--   <a>Trace</a>
handleLogMsgTraceMap :: forall b a m effs. (LastMember m effs, MonadIO m) => (b -> a) -> Trace m a -> LogMsg b ~> Eff effs

-- | Handle the <a>LogObserve</a> effect using the <a>Monadic</a> observer
--   functions
handleObserveTrace :: forall effs m a. (LastMember m effs, MonadIO m, MonadCatch m) => Configuration -> Trace m a -> Eff (LogObserve (LogMessage Text) : effs) ~> Eff effs
runLogEffects :: forall m l. MonadIO m => Trace m l -> Eff '[LogMsg l, m] ~> m

-- | Convert tracer structured log data
convertLog :: (a -> b) -> Trace m b -> Trace m a
toSeverity :: LogLevel -> Severity

-- | A <a>ToObject</a> instance that uses <a>Pretty</a> as its
--   <a>textTransformer</a>
newtype PrettyObject t
PrettyObject :: t -> PrettyObject t
[unPrettyObject] :: PrettyObject t -> t
instance Data.Aeson.Types.FromJSON.FromJSON t => Data.Aeson.Types.FromJSON.FromJSON (Plutus.Monitoring.Util.PrettyObject t)
instance Data.Aeson.Types.ToJSON.ToJSON t => Data.Aeson.Types.ToJSON.ToJSON (Plutus.Monitoring.Util.PrettyObject t)
instance Prettyprinter.Internal.Pretty t => Cardano.BM.Data.Tracer.ToObject (Plutus.Monitoring.Util.PrettyObject t)
instance Prettyprinter.Internal.Pretty t => Data.Text.Class.ToText (Plutus.Monitoring.Util.PrettyObject t)

module Cardano.Node.Socket.Emulator.Server

-- | A handler used to pass around the path to the server and channels used
--   for controlling the server.
data ServerHandler

-- | Start the server in a new thread, and return a server handler used to
--   control the server
runServerNode :: MonadIO m => Trace IO EmulatorMsg -> FilePath -> Integer -> AppState -> Params -> m ServerHandler
processBlock :: MonadIO m => ServerHandler -> m Block
modifySlot :: MonadIO m => (Slot -> Slot) -> ServerHandler -> m Slot
addTx :: MonadIO m => ServerHandler -> Tx BabbageEra -> m ()
processChainEffects :: Trace IO EmulatorMsg -> Params -> MVar AppState -> EmulatorT IO a -> IO a
instance GHC.Show.Show Cardano.Node.Socket.Emulator.Server.ServerResponse
instance GHC.Show.Show Cardano.Node.Socket.Emulator.Server.ServerCommand

module Cardano.Node.Socket.Emulator.Mock
healthcheck :: Monad m => m NoContent
consumeEventHistory :: MonadIO m => MVar AppState -> m EmulatorLogs

-- | Calls <tt>addBlock</tt> at the start of every slot, causing pending
--   transactions to be validated and added to the chain.
slotCoordinator :: SlotConfig -> ServerHandler -> IO a

module Cardano.Node.Socket.Emulator
main :: Trace IO CNSEServerLogMsg -> NodeServerConfig -> IO () -> IO ()
