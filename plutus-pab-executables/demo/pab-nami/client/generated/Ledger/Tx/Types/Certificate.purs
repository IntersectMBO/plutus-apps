-- File auto generated by purescript-bridge! --
module Ledger.Tx.Types.Certificate where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Plutus.V1.Ledger.DCert (DCert)
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype Certificate = Certificate
  { certificateDcert :: DCert
  , certificateRedeemer :: Maybe String
  }

derive instance Eq Certificate

instance Show Certificate where
  show a = genericShow a

instance EncodeJson Certificate where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { certificateDcert: E.value :: _ DCert
        , certificateRedeemer: (E.maybe E.value) :: _ (Maybe String)
        }
    )

instance DecodeJson Certificate where
  decodeJson = defer \_ -> D.decode $
    ( Certificate <$> D.record "Certificate"
        { certificateDcert: D.value :: _ DCert
        , certificateRedeemer: (D.maybe D.value) :: _ (Maybe String)
        }
    )

derive instance Generic Certificate _

derive instance Newtype Certificate _

--------------------------------------------------------------------------------

_Certificate :: Iso' Certificate { certificateDcert :: DCert, certificateRedeemer :: Maybe String }
_Certificate = _Newtype
