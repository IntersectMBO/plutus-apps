-- File auto generated by purescript-bridge! --
module Ledger.Blockchain where

import Prelude
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Plutus.V1.Ledger.Tx (Tx)
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

data OnChainTx
  = Invalid Tx
  | Valid Tx

derive instance eqOnChainTx :: Eq OnChainTx

instance showOnChainTx :: Show OnChainTx where
  show a = genericShow a

instance encodeJsonOnChainTx :: EncodeJson OnChainTx where
  encodeJson =
    defer \_ -> case _ of
      Invalid a -> E.encodeTagged "Invalid" a E.value
      Valid a -> E.encodeTagged "Valid" a E.value

instance decodeJsonOnChainTx :: DecodeJson OnChainTx where
  decodeJson =
    defer \_ ->
      D.decode
        $ D.sumType "OnChainTx"
        $ Map.fromFoldable
            [ "Invalid" /\ D.content (Invalid <$> D.value)
            , "Valid" /\ D.content (Valid <$> D.value)
            ]

derive instance genericOnChainTx :: Generic OnChainTx _

--------------------------------------------------------------------------------
_Invalid :: Prism' OnChainTx Tx
_Invalid =
  prism' Invalid case _ of
    (Invalid a) -> Just a
    _ -> Nothing

_Valid :: Prism' OnChainTx Tx
_Valid =
  prism' Valid case _ of
    (Valid a) -> Just a
    _ -> Nothing

--------------------------------------------------------------------------------
newtype BlockId
  = BlockId { getBlockId :: String }

derive instance eqBlockId :: Eq BlockId

derive instance ordBlockId :: Ord BlockId

instance showBlockId :: Show BlockId where
  show a = genericShow a

instance encodeJsonBlockId :: EncodeJson BlockId where
  encodeJson =
    defer \_ ->
      E.encode $ unwrap
        >$< ( E.record
              { getBlockId: E.value :: _ String }
          )

instance decodeJsonBlockId :: DecodeJson BlockId where
  decodeJson = defer \_ -> D.decode $ (BlockId <$> D.record "BlockId" { getBlockId: D.value :: _ String })

derive instance genericBlockId :: Generic BlockId _

derive instance newtypeBlockId :: Newtype BlockId _

--------------------------------------------------------------------------------
_BlockId :: Iso' BlockId { getBlockId :: String }
_BlockId = _Newtype
