-- File auto generated by purescript-bridge! --
module Cardano.Api.Script where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Bounded.Generic (genericBottom, genericTop)
import Data.Enum (class Enum)
import Data.Enum.Generic (genericPred, genericSucc)
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

data ScriptInAnyLang
  = SimpleScriptLanguageV1
  | SimpleScriptLanguageV2
  | PlutusScriptLanguageV1
  | PlutusScriptLanguageV2

derive instance Eq ScriptInAnyLang

instance Show ScriptInAnyLang where
  show a = genericShow a

instance EncodeJson ScriptInAnyLang where
  encodeJson = defer \_ -> E.encode E.enum

instance DecodeJson ScriptInAnyLang where
  decodeJson = defer \_ -> D.decode D.enum

derive instance Ord ScriptInAnyLang

derive instance Generic ScriptInAnyLang _

instance Enum ScriptInAnyLang where
  succ = genericSucc
  pred = genericPred

instance Bounded ScriptInAnyLang where
  bottom = genericBottom
  top = genericTop

--------------------------------------------------------------------------------

_SimpleScriptLanguageV1 :: Prism' ScriptInAnyLang Unit
_SimpleScriptLanguageV1 = prism' (const SimpleScriptLanguageV1) case _ of
  SimpleScriptLanguageV1 -> Just unit
  _ -> Nothing

_SimpleScriptLanguageV2 :: Prism' ScriptInAnyLang Unit
_SimpleScriptLanguageV2 = prism' (const SimpleScriptLanguageV2) case _ of
  SimpleScriptLanguageV2 -> Just unit
  _ -> Nothing

_PlutusScriptLanguageV1 :: Prism' ScriptInAnyLang Unit
_PlutusScriptLanguageV1 = prism' (const PlutusScriptLanguageV1) case _ of
  PlutusScriptLanguageV1 -> Just unit
  _ -> Nothing

_PlutusScriptLanguageV2 :: Prism' ScriptInAnyLang Unit
_PlutusScriptLanguageV2 = prism' (const PlutusScriptLanguageV2) case _ of
  PlutusScriptLanguageV2 -> Just unit
  _ -> Nothing
