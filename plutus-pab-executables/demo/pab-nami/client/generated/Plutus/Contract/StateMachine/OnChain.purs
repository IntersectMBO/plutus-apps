-- File auto generated by purescript-bridge! --
module Plutus.Contract.StateMachine.OnChain where

import Prelude
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Plutus.V1.Ledger.Value (Value)
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype State a
  = State
  { stateData :: a
  , stateValue :: Value
  }

derive instance eqState :: (Eq a) => Eq (State a)

instance showState :: (Show a) => Show (State a) where
  show a = genericShow a

instance encodeJsonState :: (EncodeJson a) => EncodeJson (State a) where
  encodeJson =
    defer \_ ->
      E.encode $ unwrap
        >$<
          ( E.record
              { stateData: E.value :: _ a
              , stateValue: E.value :: _ Value
              }
          )

instance decodeJsonState :: (DecodeJson a) => DecodeJson (State a) where
  decodeJson =
    defer \_ ->
      D.decode
        $
          ( State
              <$> D.record "State"
                { stateData: D.value :: _ a
                , stateValue: D.value :: _ Value
                }
          )

derive instance genericState :: Generic (State a) _

derive instance newtypeState :: Newtype (State a) _

--------------------------------------------------------------------------------
_State :: forall a. Iso' (State a) { stateData :: a, stateValue :: Value }
_State = _Newtype
