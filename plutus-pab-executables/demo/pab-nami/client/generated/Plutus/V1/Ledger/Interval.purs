-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Interval where

import Prelude

import Control.Lazy (defer)
import Data.Argonaut (encodeJson, jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

data Extended a
  = NegInf
  | Finite a
  | PosInf

derive instance Functor Extended

derive instance (Eq a) => Eq (Extended a)

instance (Show a) => Show (Extended a) where
  show a = genericShow a

instance (EncodeJson a) => EncodeJson (Extended a) where
  encodeJson = defer \_ -> case _ of
    NegInf -> encodeJson { tag: "NegInf", contents: jsonNull }
    Finite a -> E.encodeTagged "Finite" a E.value
    PosInf -> encodeJson { tag: "PosInf", contents: jsonNull }

instance (DecodeJson a) => DecodeJson (Extended a) where
  decodeJson = defer \_ -> D.decode
    $ D.sumType "Extended"
    $ Map.fromFoldable
        [ "NegInf" /\ pure NegInf
        , "Finite" /\ D.content (Finite <$> D.value)
        , "PosInf" /\ pure PosInf
        ]

derive instance Generic (Extended a) _

--------------------------------------------------------------------------------

_NegInf :: forall a. Prism' (Extended a) Unit
_NegInf = prism' (const NegInf) case _ of
  NegInf -> Just unit
  _ -> Nothing

_Finite :: forall a. Prism' (Extended a) a
_Finite = prism' Finite case _ of
  (Finite a) -> Just a
  _ -> Nothing

_PosInf :: forall a. Prism' (Extended a) Unit
_PosInf = prism' (const PosInf) case _ of
  PosInf -> Just unit
  _ -> Nothing

--------------------------------------------------------------------------------

newtype Interval a = Interval
  { ivFrom :: LowerBound a
  , ivTo :: UpperBound a
  }

derive instance Functor Interval

derive instance (Eq a) => Eq (Interval a)

instance (Show a) => Show (Interval a) where
  show a = genericShow a

instance (EncodeJson a) => EncodeJson (Interval a) where
  encodeJson = defer \_ -> E.encode $ unwrap >$<
    ( E.record
        { ivFrom: E.value :: _ (LowerBound a)
        , ivTo: E.value :: _ (UpperBound a)
        }
    )

instance (DecodeJson a) => DecodeJson (Interval a) where
  decodeJson = defer \_ -> D.decode $
    ( Interval <$> D.record "Interval"
        { ivFrom: D.value :: _ (LowerBound a)
        , ivTo: D.value :: _ (UpperBound a)
        }
    )

derive instance Generic (Interval a) _

derive instance Newtype (Interval a) _

--------------------------------------------------------------------------------

_Interval :: forall a. Iso' (Interval a) { ivFrom :: LowerBound a, ivTo :: UpperBound a }
_Interval = _Newtype

--------------------------------------------------------------------------------

data LowerBound a = LowerBound (Extended a) Boolean

derive instance Functor LowerBound

derive instance (Eq a) => Eq (LowerBound a)

instance (Show a) => Show (LowerBound a) where
  show a = genericShow a

instance (EncodeJson a) => EncodeJson (LowerBound a) where
  encodeJson = defer \_ -> E.encode $ (case _ of LowerBound a b -> (a /\ b)) >$< (E.tuple (E.value >/\< E.value))

instance (DecodeJson a) => DecodeJson (LowerBound a) where
  decodeJson = defer \_ -> D.decode $ (D.tuple $ LowerBound </$\> D.value </*\> D.value)

derive instance Generic (LowerBound a) _

--------------------------------------------------------------------------------

_LowerBound :: forall a. Iso' (LowerBound a) { a :: Extended a, b :: Boolean }
_LowerBound = iso (\(LowerBound a b) -> { a, b }) (\{ a, b } -> (LowerBound a b))

--------------------------------------------------------------------------------

data UpperBound a = UpperBound (Extended a) Boolean

derive instance Functor UpperBound

derive instance (Eq a) => Eq (UpperBound a)

instance (Show a) => Show (UpperBound a) where
  show a = genericShow a

instance (EncodeJson a) => EncodeJson (UpperBound a) where
  encodeJson = defer \_ -> E.encode $ (case _ of UpperBound a b -> (a /\ b)) >$< (E.tuple (E.value >/\< E.value))

instance (DecodeJson a) => DecodeJson (UpperBound a) where
  decodeJson = defer \_ -> D.decode $ (D.tuple $ UpperBound </$\> D.value </*\> D.value)

derive instance Generic (UpperBound a) _

--------------------------------------------------------------------------------

_UpperBound :: forall a. Iso' (UpperBound a) { a :: Extended a, b :: Boolean }
_UpperBound = iso (\(UpperBound a b) -> { a, b }) (\{ a, b } -> (UpperBound a b))
