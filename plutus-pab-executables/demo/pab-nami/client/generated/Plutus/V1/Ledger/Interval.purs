-- File auto generated by purescript-bridge! --
module Plutus.V1.Ledger.Interval where

import Prelude
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Type.Proxy (Proxy(Proxy))
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

data Extended a
  = NegInf
  | Finite a
  | PosInf

derive instance functorExtended :: Functor Extended

derive instance eqExtended :: (Eq a) => Eq (Extended a)

instance showExtended :: (Show a) => Show (Extended a) where
  show a = genericShow a

instance encodeJsonExtended :: (EncodeJson a) => EncodeJson (Extended a) where
  encodeJson =
    defer \_ -> case _ of
      NegInf -> encodeJson { tag: "NegInf", contents: jsonNull }
      Finite a -> E.encodeTagged "Finite" a E.value
      PosInf -> encodeJson { tag: "PosInf", contents: jsonNull }

instance decodeJsonExtended :: (DecodeJson a) => DecodeJson (Extended a) where
  decodeJson =
    defer \_ ->
      D.decode
        $ D.sumType "Extended"
        $ Map.fromFoldable
            [ "NegInf" /\ pure NegInf
            , "Finite" /\ D.content (Finite <$> D.value)
            , "PosInf" /\ pure PosInf
            ]

derive instance genericExtended :: Generic (Extended a) _

--------------------------------------------------------------------------------
_NegInf :: forall a. Prism' (Extended a) Unit
_NegInf =
  prism' (const NegInf) case _ of
    NegInf -> Just unit
    _ -> Nothing

_Finite :: forall a. Prism' (Extended a) a
_Finite =
  prism' Finite case _ of
    (Finite a) -> Just a
    _ -> Nothing

_PosInf :: forall a. Prism' (Extended a) Unit
_PosInf =
  prism' (const PosInf) case _ of
    PosInf -> Just unit
    _ -> Nothing

--------------------------------------------------------------------------------
newtype Interval a
  = Interval
  { ivFrom :: LowerBound a
  , ivTo :: UpperBound a
  }

derive instance functorInterval :: Functor Interval

derive instance eqInterval :: (Eq a) => Eq (Interval a)

instance showInterval :: (Show a) => Show (Interval a) where
  show a = genericShow a

instance encodeJsonInterval :: (EncodeJson a) => EncodeJson (Interval a) where
  encodeJson =
    defer \_ ->
      E.encode $ unwrap
        >$<
          ( E.record
              { ivFrom: E.value :: _ (LowerBound a)
              , ivTo: E.value :: _ (UpperBound a)
              }
          )

instance decodeJsonInterval :: (DecodeJson a) => DecodeJson (Interval a) where
  decodeJson =
    defer \_ ->
      D.decode
        $
          ( Interval
              <$> D.record "Interval"
                { ivFrom: D.value :: _ (LowerBound a)
                , ivTo: D.value :: _ (UpperBound a)
                }
          )

derive instance genericInterval :: Generic (Interval a) _

derive instance newtypeInterval :: Newtype (Interval a) _

--------------------------------------------------------------------------------
_Interval :: forall a. Iso' (Interval a) { ivFrom :: LowerBound a, ivTo :: UpperBound a }
_Interval = _Newtype

--------------------------------------------------------------------------------
data LowerBound a
  = LowerBound (Extended a) Boolean

derive instance functorLowerBound :: Functor LowerBound

derive instance eqLowerBound :: (Eq a) => Eq (LowerBound a)

instance showLowerBound :: (Show a) => Show (LowerBound a) where
  show a = genericShow a

instance encodeJsonLowerBound :: (EncodeJson a) => EncodeJson (LowerBound a) where
  encodeJson = defer \_ -> E.encode $ (case _ of LowerBound a b -> (a /\ b)) >$< (E.tuple (E.value >/\< E.value))

instance decodeJsonLowerBound :: (DecodeJson a) => DecodeJson (LowerBound a) where
  decodeJson = defer \_ -> D.decode $ (D.tuple $ LowerBound </$\> D.value </*\> D.value)

derive instance genericLowerBound :: Generic (LowerBound a) _

--------------------------------------------------------------------------------
_LowerBound :: forall a. Iso' (LowerBound a) { a :: Extended a, b :: Boolean }
_LowerBound = iso (\(LowerBound a b) -> { a, b }) (\{ a, b } -> (LowerBound a b))

--------------------------------------------------------------------------------
data UpperBound a
  = UpperBound (Extended a) Boolean

derive instance functorUpperBound :: Functor UpperBound

derive instance eqUpperBound :: (Eq a) => Eq (UpperBound a)

instance showUpperBound :: (Show a) => Show (UpperBound a) where
  show a = genericShow a

instance encodeJsonUpperBound :: (EncodeJson a) => EncodeJson (UpperBound a) where
  encodeJson = defer \_ -> E.encode $ (case _ of UpperBound a b -> (a /\ b)) >$< (E.tuple (E.value >/\< E.value))

instance decodeJsonUpperBound :: (DecodeJson a) => DecodeJson (UpperBound a) where
  decodeJson = defer \_ -> D.decode $ (D.tuple $ UpperBound </$\> D.value </*\> D.value)

derive instance genericUpperBound :: Generic (UpperBound a) _

--------------------------------------------------------------------------------
_UpperBound :: forall a. Iso' (UpperBound a) { a :: Extended a, b :: Boolean }
_UpperBound = iso (\(UpperBound a b) -> { a, b }) (\{ a, b } -> (UpperBound a b))
