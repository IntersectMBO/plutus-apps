-- File auto generated by purescript-bridge! --
module Plutus.Trace.Emulator.Types where

import Prelude
import Control.Lazy (defer)
import Data.Argonaut.Core (jsonNull)
import Data.Argonaut.Decode (class DecodeJson)
import Data.Argonaut.Decode.Aeson ((</$\>), (</*\>), (</\>))
import Data.Argonaut.Encode (class EncodeJson, encodeJson)
import Data.Argonaut.Encode.Aeson ((>$<), (>/\<))
import Data.Generic.Rep (class Generic)
import Data.Lens (Iso', Lens', Prism', iso, prism')
import Data.Lens.Iso.Newtype (_Newtype)
import Data.Lens.Record (prop)
import Data.Maybe (Maybe(..))
import Data.Newtype (class Newtype, unwrap)
import Data.RawJson (RawJson)
import Data.Show.Generic (genericShow)
import Data.Tuple.Nested ((/\))
import Plutus.Contract.Resumable (Request, Response)
import Plutus.Trace.Scheduler (ThreadId)
import Type.Proxy (Proxy(Proxy))
import Wallet.Emulator.Error (WalletAPIError)
import Wallet.Emulator.Wallet (Wallet)
import Wallet.Types (ContractInstanceId, EndpointDescription, Notification, NotificationError)
import Data.Argonaut.Decode.Aeson as D
import Data.Argonaut.Encode.Aeson as E
import Data.Map as Map

newtype ContractInstanceLog
  = ContractInstanceLog
  { _cilMessage :: ContractInstanceMsg
  , _cilId :: ContractInstanceId
  , _cilTag :: ContractInstanceTag
  }

derive instance eqContractInstanceLog :: Eq ContractInstanceLog

instance showContractInstanceLog :: Show ContractInstanceLog where
  show a = genericShow a

instance encodeJsonContractInstanceLog :: EncodeJson ContractInstanceLog where
  encodeJson =
    defer \_ ->
      E.encode $ unwrap
        >$< ( E.record
              { _cilMessage: E.value :: _ ContractInstanceMsg
              , _cilId: E.value :: _ ContractInstanceId
              , _cilTag: E.value :: _ ContractInstanceTag
              }
          )

instance decodeJsonContractInstanceLog :: DecodeJson ContractInstanceLog where
  decodeJson =
    defer \_ ->
      D.decode
        $ ( ContractInstanceLog
              <$> D.record "ContractInstanceLog"
                  { _cilMessage: D.value :: _ ContractInstanceMsg
                  , _cilId: D.value :: _ ContractInstanceId
                  , _cilTag: D.value :: _ ContractInstanceTag
                  }
          )

derive instance genericContractInstanceLog :: Generic ContractInstanceLog _

derive instance newtypeContractInstanceLog :: Newtype ContractInstanceLog _

--------------------------------------------------------------------------------
_ContractInstanceLog :: Iso' ContractInstanceLog { _cilMessage :: ContractInstanceMsg, _cilId :: ContractInstanceId, _cilTag :: ContractInstanceTag }
_ContractInstanceLog = _Newtype

cilMessage :: Lens' ContractInstanceLog ContractInstanceMsg
cilMessage = _Newtype <<< prop (Proxy :: _ "_cilMessage")

cilId :: Lens' ContractInstanceLog ContractInstanceId
cilId = _Newtype <<< prop (Proxy :: _ "_cilId")

cilTag :: Lens' ContractInstanceLog ContractInstanceTag
cilTag = _Newtype <<< prop (Proxy :: _ "_cilTag")

--------------------------------------------------------------------------------
data UserThreadMsg
  = UserThreadErr EmulatorRuntimeError
  | UserLog String

derive instance eqUserThreadMsg :: Eq UserThreadMsg

instance showUserThreadMsg :: Show UserThreadMsg where
  show a = genericShow a

instance encodeJsonUserThreadMsg :: EncodeJson UserThreadMsg where
  encodeJson =
    defer \_ -> case _ of
      UserThreadErr a -> E.encodeTagged "UserThreadErr" a E.value
      UserLog a -> E.encodeTagged "UserLog" a E.value

instance decodeJsonUserThreadMsg :: DecodeJson UserThreadMsg where
  decodeJson =
    defer \_ ->
      D.decode
        $ D.sumType "UserThreadMsg"
        $ Map.fromFoldable
            [ "UserThreadErr" /\ D.content (UserThreadErr <$> D.value)
            , "UserLog" /\ D.content (UserLog <$> D.value)
            ]

derive instance genericUserThreadMsg :: Generic UserThreadMsg _

--------------------------------------------------------------------------------
_UserThreadErr :: Prism' UserThreadMsg EmulatorRuntimeError
_UserThreadErr =
  prism' UserThreadErr case _ of
    (UserThreadErr a) -> Just a
    _ -> Nothing

_UserLog :: Prism' UserThreadMsg String
_UserLog =
  prism' UserLog case _ of
    (UserLog a) -> Just a
    _ -> Nothing

--------------------------------------------------------------------------------
data ContractInstanceMsg
  = Started
  | StoppedNoError
  | StoppedWithError String
  | ReceiveEndpointCall EndpointDescription RawJson
  | ReceiveEndpointCallSuccess
  | ReceiveEndpointCallFailure NotificationError
  | NoRequestsHandled
  | HandledRequest (Response RawJson)
  | CurrentRequests (Array (Request RawJson))
  | InstErr EmulatorRuntimeError
  | ContractLog RawJson
  | SendingNotification Notification
  | NotificationSuccess Notification
  | NotificationFailure NotificationError
  | SendingContractState ThreadId
  | Freezing

derive instance eqContractInstanceMsg :: Eq ContractInstanceMsg

instance showContractInstanceMsg :: Show ContractInstanceMsg where
  show a = genericShow a

instance encodeJsonContractInstanceMsg :: EncodeJson ContractInstanceMsg where
  encodeJson =
    defer \_ -> case _ of
      Started -> encodeJson { tag: "Started", contents: jsonNull }
      StoppedNoError -> encodeJson { tag: "StoppedNoError", contents: jsonNull }
      StoppedWithError a -> E.encodeTagged "StoppedWithError" a E.value
      ReceiveEndpointCall a b -> E.encodeTagged "ReceiveEndpointCall" (a /\ b) (E.tuple (E.value >/\< E.value))
      ReceiveEndpointCallSuccess -> encodeJson { tag: "ReceiveEndpointCallSuccess", contents: jsonNull }
      ReceiveEndpointCallFailure a -> E.encodeTagged "ReceiveEndpointCallFailure" a E.value
      NoRequestsHandled -> encodeJson { tag: "NoRequestsHandled", contents: jsonNull }
      HandledRequest a -> E.encodeTagged "HandledRequest" a E.value
      CurrentRequests a -> E.encodeTagged "CurrentRequests" a E.value
      InstErr a -> E.encodeTagged "InstErr" a E.value
      ContractLog a -> E.encodeTagged "ContractLog" a E.value
      SendingNotification a -> E.encodeTagged "SendingNotification" a E.value
      NotificationSuccess a -> E.encodeTagged "NotificationSuccess" a E.value
      NotificationFailure a -> E.encodeTagged "NotificationFailure" a E.value
      SendingContractState a -> E.encodeTagged "SendingContractState" a E.value
      Freezing -> encodeJson { tag: "Freezing", contents: jsonNull }

instance decodeJsonContractInstanceMsg :: DecodeJson ContractInstanceMsg where
  decodeJson =
    defer \_ ->
      D.decode
        $ D.sumType "ContractInstanceMsg"
        $ Map.fromFoldable
            [ "Started" /\ pure Started
            , "StoppedNoError" /\ pure StoppedNoError
            , "StoppedWithError" /\ D.content (StoppedWithError <$> D.value)
            , "ReceiveEndpointCall" /\ D.content (D.tuple $ ReceiveEndpointCall </$\> D.value </*\> D.value)
            , "ReceiveEndpointCallSuccess" /\ pure ReceiveEndpointCallSuccess
            , "ReceiveEndpointCallFailure" /\ D.content (ReceiveEndpointCallFailure <$> D.value)
            , "NoRequestsHandled" /\ pure NoRequestsHandled
            , "HandledRequest" /\ D.content (HandledRequest <$> D.value)
            , "CurrentRequests" /\ D.content (CurrentRequests <$> D.value)
            , "InstErr" /\ D.content (InstErr <$> D.value)
            , "ContractLog" /\ D.content (ContractLog <$> D.value)
            , "SendingNotification" /\ D.content (SendingNotification <$> D.value)
            , "NotificationSuccess" /\ D.content (NotificationSuccess <$> D.value)
            , "NotificationFailure" /\ D.content (NotificationFailure <$> D.value)
            , "SendingContractState" /\ D.content (SendingContractState <$> D.value)
            , "Freezing" /\ pure Freezing
            ]

derive instance genericContractInstanceMsg :: Generic ContractInstanceMsg _

--------------------------------------------------------------------------------
_Started :: Prism' ContractInstanceMsg Unit
_Started =
  prism' (const Started) case _ of
    Started -> Just unit
    _ -> Nothing

_StoppedNoError :: Prism' ContractInstanceMsg Unit
_StoppedNoError =
  prism' (const StoppedNoError) case _ of
    StoppedNoError -> Just unit
    _ -> Nothing

_StoppedWithError :: Prism' ContractInstanceMsg String
_StoppedWithError =
  prism' StoppedWithError case _ of
    (StoppedWithError a) -> Just a
    _ -> Nothing

_ReceiveEndpointCall :: Prism' ContractInstanceMsg { a :: EndpointDescription, b :: RawJson }
_ReceiveEndpointCall =
  prism' (\{ a, b } -> (ReceiveEndpointCall a b)) case _ of
    (ReceiveEndpointCall a b) -> Just { a, b }
    _ -> Nothing

_ReceiveEndpointCallSuccess :: Prism' ContractInstanceMsg Unit
_ReceiveEndpointCallSuccess =
  prism' (const ReceiveEndpointCallSuccess) case _ of
    ReceiveEndpointCallSuccess -> Just unit
    _ -> Nothing

_ReceiveEndpointCallFailure :: Prism' ContractInstanceMsg NotificationError
_ReceiveEndpointCallFailure =
  prism' ReceiveEndpointCallFailure case _ of
    (ReceiveEndpointCallFailure a) -> Just a
    _ -> Nothing

_NoRequestsHandled :: Prism' ContractInstanceMsg Unit
_NoRequestsHandled =
  prism' (const NoRequestsHandled) case _ of
    NoRequestsHandled -> Just unit
    _ -> Nothing

_HandledRequest :: Prism' ContractInstanceMsg (Response RawJson)
_HandledRequest =
  prism' HandledRequest case _ of
    (HandledRequest a) -> Just a
    _ -> Nothing

_CurrentRequests :: Prism' ContractInstanceMsg (Array (Request RawJson))
_CurrentRequests =
  prism' CurrentRequests case _ of
    (CurrentRequests a) -> Just a
    _ -> Nothing

_InstErr :: Prism' ContractInstanceMsg EmulatorRuntimeError
_InstErr =
  prism' InstErr case _ of
    (InstErr a) -> Just a
    _ -> Nothing

_ContractLog :: Prism' ContractInstanceMsg RawJson
_ContractLog =
  prism' ContractLog case _ of
    (ContractLog a) -> Just a
    _ -> Nothing

_SendingNotification :: Prism' ContractInstanceMsg Notification
_SendingNotification =
  prism' SendingNotification case _ of
    (SendingNotification a) -> Just a
    _ -> Nothing

_NotificationSuccess :: Prism' ContractInstanceMsg Notification
_NotificationSuccess =
  prism' NotificationSuccess case _ of
    (NotificationSuccess a) -> Just a
    _ -> Nothing

_NotificationFailure :: Prism' ContractInstanceMsg NotificationError
_NotificationFailure =
  prism' NotificationFailure case _ of
    (NotificationFailure a) -> Just a
    _ -> Nothing

_SendingContractState :: Prism' ContractInstanceMsg ThreadId
_SendingContractState =
  prism' SendingContractState case _ of
    (SendingContractState a) -> Just a
    _ -> Nothing

_Freezing :: Prism' ContractInstanceMsg Unit
_Freezing =
  prism' (const Freezing) case _ of
    Freezing -> Just unit
    _ -> Nothing

--------------------------------------------------------------------------------
newtype ContractInstanceTag
  = ContractInstanceTag
  { unContractInstanceTag :: String
  , shortContractInstanceTag :: String
  }

derive instance eqContractInstanceTag :: Eq ContractInstanceTag

instance showContractInstanceTag :: Show ContractInstanceTag where
  show a = genericShow a

instance encodeJsonContractInstanceTag :: EncodeJson ContractInstanceTag where
  encodeJson =
    defer \_ ->
      E.encode $ unwrap
        >$< ( E.record
              { unContractInstanceTag: E.value :: _ String
              , shortContractInstanceTag: E.value :: _ String
              }
          )

instance decodeJsonContractInstanceTag :: DecodeJson ContractInstanceTag where
  decodeJson =
    defer \_ ->
      D.decode
        $ ( ContractInstanceTag
              <$> D.record "ContractInstanceTag"
                  { unContractInstanceTag: D.value :: _ String
                  , shortContractInstanceTag: D.value :: _ String
                  }
          )

derive instance genericContractInstanceTag :: Generic ContractInstanceTag _

derive instance newtypeContractInstanceTag :: Newtype ContractInstanceTag _

--------------------------------------------------------------------------------
_ContractInstanceTag :: Iso' ContractInstanceTag { unContractInstanceTag :: String, shortContractInstanceTag :: String }
_ContractInstanceTag = _Newtype

--------------------------------------------------------------------------------
data EmulatorRuntimeError
  = ThreadIdNotFound ContractInstanceId
  | InstanceIdNotFound Wallet
  | EmulatorJSONDecodingError String RawJson
  | GenericError String
  | EmulatedWalletError WalletAPIError
  | AssertionError String

derive instance eqEmulatorRuntimeError :: Eq EmulatorRuntimeError

instance showEmulatorRuntimeError :: Show EmulatorRuntimeError where
  show a = genericShow a

instance encodeJsonEmulatorRuntimeError :: EncodeJson EmulatorRuntimeError where
  encodeJson =
    defer \_ -> case _ of
      ThreadIdNotFound a -> E.encodeTagged "ThreadIdNotFound" a E.value
      InstanceIdNotFound a -> E.encodeTagged "InstanceIdNotFound" a E.value
      EmulatorJSONDecodingError a b -> E.encodeTagged "EmulatorJSONDecodingError" (a /\ b) (E.tuple (E.value >/\< E.value))
      GenericError a -> E.encodeTagged "GenericError" a E.value
      EmulatedWalletError a -> E.encodeTagged "EmulatedWalletError" a E.value
      AssertionError a -> E.encodeTagged "AssertionError" a E.value

instance decodeJsonEmulatorRuntimeError :: DecodeJson EmulatorRuntimeError where
  decodeJson =
    defer \_ ->
      D.decode
        $ D.sumType "EmulatorRuntimeError"
        $ Map.fromFoldable
            [ "ThreadIdNotFound" /\ D.content (ThreadIdNotFound <$> D.value)
            , "InstanceIdNotFound" /\ D.content (InstanceIdNotFound <$> D.value)
            , "EmulatorJSONDecodingError" /\ D.content (D.tuple $ EmulatorJSONDecodingError </$\> D.value </*\> D.value)
            , "GenericError" /\ D.content (GenericError <$> D.value)
            , "EmulatedWalletError" /\ D.content (EmulatedWalletError <$> D.value)
            , "AssertionError" /\ D.content (AssertionError <$> D.value)
            ]

derive instance genericEmulatorRuntimeError :: Generic EmulatorRuntimeError _

--------------------------------------------------------------------------------
_ThreadIdNotFound :: Prism' EmulatorRuntimeError ContractInstanceId
_ThreadIdNotFound =
  prism' ThreadIdNotFound case _ of
    (ThreadIdNotFound a) -> Just a
    _ -> Nothing

_InstanceIdNotFound :: Prism' EmulatorRuntimeError Wallet
_InstanceIdNotFound =
  prism' InstanceIdNotFound case _ of
    (InstanceIdNotFound a) -> Just a
    _ -> Nothing

_EmulatorJSONDecodingError :: Prism' EmulatorRuntimeError { a :: String, b :: RawJson }
_EmulatorJSONDecodingError =
  prism' (\{ a, b } -> (EmulatorJSONDecodingError a b)) case _ of
    (EmulatorJSONDecodingError a b) -> Just { a, b }
    _ -> Nothing

_GenericError :: Prism' EmulatorRuntimeError String
_GenericError =
  prism' GenericError case _ of
    (GenericError a) -> Just a
    _ -> Nothing

_EmulatedWalletError :: Prism' EmulatorRuntimeError WalletAPIError
_EmulatedWalletError =
  prism' EmulatedWalletError case _ of
    (EmulatedWalletError a) -> Just a
    _ -> Nothing

_AssertionError :: Prism' EmulatorRuntimeError String
_AssertionError =
  prism' AssertionError case _ of
    (AssertionError a) -> Just a
    _ -> Nothing
