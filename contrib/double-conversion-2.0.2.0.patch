diff --git b/Data/Double/Conversion/ByteString.hs a/Data/Double/Conversion/ByteString.hs
index 64373c19a..54f20d5ef 100644
--- b/Data/Double/Conversion/ByteString.hs
+++ a/Data/Double/Conversion/ByteString.hs
@@ -1,20 +1,3 @@
--- |
--- Module      : Data.Double.Conversion.ByteString
--- Copyright   : (c) 2011 MailRank, Inc.
---
--- License     : BSD-style
--- Maintainer  : bos@serpentine.com
--- Stability   : experimental
--- Portability : GHC
---
--- Fast, efficient support for converting between double precision
--- floating point values and text.
---
--- Although about 15 times faster than plain 'show', these functions
--- are /slower/ than their 'Text' counterparts, at roughly half the
--- speed.  (This seems to be due to the cost of allocating
--- 'ByteString' values via @malloc@.)
-
 module Data.Double.Conversion.ByteString
     (
       toExponential
@@ -23,54 +6,17 @@ module Data.Double.Conversion.ByteString
     , toShortest
     ) where

-import Control.Monad (when)
-import Foreign.ForeignPtr (withForeignPtr)
-import Data.Double.Conversion.FFI
-import Data.Word (Word8)
-import Data.ByteString.Internal (ByteString(..), mallocByteString)
-import Foreign.C.Types (CDouble, CInt)
-import Foreign.Ptr (Ptr)
-import System.IO.Unsafe (unsafePerformIO)
+import Data.ByteString.Internal (ByteString)

--- | Compute a representation in exponential format with the requested
--- number of digits after the decimal point. The last emitted digit is
--- rounded.  If -1 digits are requested, then the shortest exponential
--- representation is computed.
 toExponential :: Int -> Double -> ByteString
-toExponential ndigits = convert "toExponential" len $ \val mba ->
-                        c_ToExponential val mba (fromIntegral ndigits)
-  where len = c_ToExponentialLength
-        {-# NOINLINE len #-}
+toExponential _ _ = error "toExponential not implemented"

--- | Compute a decimal representation with a fixed number of digits
--- after the decimal point. The last emitted digit is rounded.
 toFixed :: Int -> Double -> ByteString
-toFixed ndigits = convert "toFixed" len $ \val mba ->
-                  c_ToFixed val mba (fromIntegral ndigits)
-  where len = c_ToFixedLength
-        {-# NOINLINE len #-}
+toFixed _ _ = error "toFixed not implemented"

--- | Compute the shortest string of digits that correctly represent
--- the input number.
 toShortest :: Double -> ByteString
-toShortest = convert "toShortest" len c_ToShortest
-  where len = c_ToShortestLength
-        {-# NOINLINE len #-}
+toShortest _ = error "toShortest not implemented"

--- | Compute @precision@ leading digits of the given value either in
--- exponential or decimal format. The last computed digit is rounded.
 toPrecision :: Int -> Double -> ByteString
-toPrecision ndigits = convert "toPrecision" len $ \val mba ->
-                      c_ToPrecision val mba (fromIntegral ndigits)
-  where len = c_ToPrecisionLength
-        {-# NOINLINE len #-}
+toPrecision _ = error "toPrecision not implemented"

-convert :: String -> CInt -> (CDouble -> Ptr Word8 -> IO CInt)
-        -> Double -> ByteString
-convert func len act val = unsafePerformIO $ do
-  fp <- mallocByteString (fromIntegral len)
-  size <- withForeignPtr fp $ act (realToFrac val)
-  when (size == -1) .
-    fail $ "Data.Double.Conversion.ByteString." ++ func ++
-           ": conversion failed (invalid precision requested)"
-  return $ PS fp 0 (fromIntegral size)
diff --git b/Data/Double/Conversion/Text.hs a/Data/Double/Conversion/Text.hs
index 2e897052f..bc57818b0 100644
--- b/Data/Double/Conversion/Text.hs
+++ a/Data/Double/Conversion/Text.hs
@@ -1,20 +1,3 @@
-{-# LANGUAGE CPP, MagicHash, Rank2Types #-}
-
--- |
--- Module      : Data.Double.Conversion.Text
--- Copyright   : (c) 2011 MailRank, Inc.
---
--- License     : BSD-style
--- Maintainer  : bos@serpentine.com
--- Stability   : experimental
--- Portability : GHC
---
--- Fast, efficient support for converting between double precision
--- floating point values and text.
---
--- These functions are about 30 times faster than the default 'show'
--- implementation for the 'Double' type.
-
 module Data.Double.Conversion.Text
     (
       toExponential
@@ -23,62 +6,17 @@ module Data.Double.Conversion.Text
     , toShortest
     ) where

-import Control.Monad (when)
-#if MIN_VERSION_base(4,4,0)
-import Control.Monad.ST.Unsafe (unsafeIOToST)
-#else
-import Control.Monad.ST (unsafeIOToST)
-#endif
-import Control.Monad.ST (runST)
-import Data.Double.Conversion.FFI
-import Data.Text.Internal (Text(Text))
-import Foreign.C.Types (CDouble, CInt)
-import GHC.Prim (MutableByteArray#)
-import qualified Data.Text.Array as A
+import Data.Text (Text)

--- | Compute a representation in exponential format with the requested
--- number of digits after the decimal point. The last emitted digit is
--- rounded.  If -1 digits are requested, then the shortest exponential
--- representation is computed.
 toExponential :: Int -> Double -> Text
-toExponential ndigits = convert "toExponential" len $ \val mba ->
-                        c_Text_ToExponential val mba (fromIntegral ndigits)
-  where len = c_ToExponentialLength
-        {-# NOINLINE len #-}
+toExponential _ _ = error "toExponential not implemented"

--- | Compute a decimal representation with a fixed number of digits
--- after the decimal point. The last emitted digit is rounded.
 toFixed :: Int -> Double -> Text
-toFixed ndigits = convert "toFixed" len $ \val mba ->
-                  c_Text_ToFixed val mba (fromIntegral ndigits)
-  where len = c_ToFixedLength
-        {-# NOINLINE len #-}
+toFixed _ _ = error "toFixed not implemented"

--- | Compute the shortest string of digits that correctly represent
--- the input number.
 toShortest :: Double -> Text
-toShortest = convert "toShortest" len c_Text_ToShortest
-  where len = c_ToShortestLength
-        {-# NOINLINE len #-}
+toShortest _ = error "toShortest not implemented"

--- | Compute @precision@ leading digits of the given value either in
--- exponential or decimal format. The last computed digit is rounded.
 toPrecision :: Int -> Double -> Text
-toPrecision ndigits = convert "toPrecision" len $ \val mba ->
-                      c_Text_ToPrecision val mba (fromIntegral ndigits)
-  where len = c_ToPrecisionLength
-        {-# NOINLINE len #-}
+toPrecision _ = error "toPrecision not implemented"

-convert :: String -> CInt
-        -> (forall s. CDouble -> MutableByteArray# s -> IO CInt)
-        -> Double -> Text
-convert func len act val = runST go
-  where
-    go = do
-      buf <- A.new (fromIntegral len)
-      size <- unsafeIOToST $ act (realToFrac val) (A.maBA buf)
-      when (size == -1) .
-        fail $ "Data.Double.Conversion.Text." ++ func ++
-               ": conversion failed (invalid precision requested)"
-      frozen <- A.unsafeFreeze buf
-      return $ Text frozen 0 (fromIntegral size)
diff --git b/double-conversion.cabal a/double-conversion.cabal
index 96114ee10..0fdeb480d 100644
--- b/double-conversion.cabal
+++ a/double-conversion.cabal
@@ -60,28 +60,6 @@ flag developer
   manual: True

 library
-  c-sources:
-    cbits/hs-double-conversion.cc
-    double-conversion/src/bignum.cc
-    double-conversion/src/bignum-dtoa.cc
-    double-conversion/src/cached-powers.cc
-    double-conversion/src/diy-fp.cc
-    double-conversion/src/double-conversion.cc
-    double-conversion/src/fast-dtoa.cc
-    double-conversion/src/fixed-dtoa.cc
-    double-conversion/src/strtod.cc
-
-  if os(windows)
-    if arch(x86_64)
-      extra-libraries: stdc++-6 gcc_s_seh-1
-    else
-      extra-libraries: stdc++-6 gcc_s_dw2-1
-  else
-    if os(darwin)
-      extra-libraries: c++
-    else
-      extra-libraries: stdc++
-
   include-dirs:
     double-conversion/src
     include
@@ -90,9 +68,6 @@ library
     Data.Double.Conversion.ByteString
     Data.Double.Conversion.Text

-  other-modules:
-    Data.Double.Conversion.FFI
-
   build-depends:
     base == 4.*,
     bytestring,
